{"version":3,"sources":["../src/util.tsx"],"names":["hasHail","hasRental","isBicycle","isBicycleRent","isMicromobility","isTransit","isWalk","coreUtils","itinerary","isBike","mode","getSupportedExclusiveModes","intl","defaultMessages","isActive","label","formatMessage","defaultMessage","description","id","isFullModeOption","modeOption","getModeString","modeObj","getCompanies","companies","modes","filter","comp","split","m","includes","length","getCompaniesForModeId","supportedCompanies","newModes","nonTransitModes","defaultAccessModeCompany","toUpperCase","map","getTransitSubmodeOptions","ModeIcon","selectedModes","transitModes","modeStr","modeLabel","selected","text","title","getPrimaryModeOption","some","showTitle","getTransitCombinedModeOptions","selectedCompanies","accessModes","modesHaveTransit","company","modeCompany","modeCompanyUpper","modeMonopoly","CompanyIcon","finalIcon","getExclusiveModeOptions","exclusiveModes","getModeOptions","primary","secondary","tertiary","getCompaniesOptions","getBicycleOrMicromobilityModeOptions"],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for core-utils packages.\nimport coreUtils from \"@opentripplanner/core-utils\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for the icons package.\nimport { getCompanyIcon } from \"@opentripplanner/icons\";\nimport React from \"react\";\nimport { IntlShape } from \"react-intl\";\n\n// eslint-disable-next-line prettier/prettier\nimport type {\n  ConfiguredCompany,\n  ConfiguredModes,\n  FullModeOption,\n  ModeIconType,\n  ModeOption,\n  ModeSelectorOption,\n  ModeSelectorOptionSet\n} from \"./types\";\n\nconst {\n  hasHail,\n  hasRental,\n  isBicycle,\n  isBicycleRent,\n  isMicromobility,\n  isTransit,\n  isWalk\n} = coreUtils.itinerary;\n\nexport function isBike(mode: string): boolean {\n  return isBicycle(mode) || isBicycleRent(mode);\n}\n\nfunction getSupportedExclusiveModes(\n  intl: IntlShape,\n  defaultMessages: Record<string, string>\n) {\n  return [\n    {\n      isActive: isWalk,\n      label: intl.formatMessage({\n        defaultMessage: defaultMessages[\"otpUi.SettingsSelectorPanel.walkOnly\"],\n        description: \"Text for walk-only mode option.\",\n        id: \"otpUi.SettingsSelectorPanel.walkOnly\"\n      }),\n      mode: \"WALK\"\n    },\n    {\n      isActive: isBike,\n      label: intl.formatMessage({\n        defaultMessage: defaultMessages[\"otpUi.SettingsSelectorPanel.bikeOnly\"],\n        description: \"Text for bike-only mode option.\",\n        id: \"otpUi.SettingsSelectorPanel.bikeOnly\"\n      }),\n      mode: \"BICYCLE\"\n    },\n    {\n      isActive: isMicromobility,\n      label: intl.formatMessage({\n        defaultMessage: defaultMessages[\"otpUi.SettingsSelectorPanel.escooterOnly\"],\n        description: \"Text for e-scooter-only mode option.\",\n        id: \"otpUi.SettingsSelectorPanel.escooterOnly\"\n      }),\n      mode: \"MICROMOBILITY\"\n    }\n  ];\n}\n\n/**\n * Helper function so that TypeScript propagates the correct underlying type for ModeOption.\n */\nexport function isFullModeOption(modeOption: ModeOption): modeOption is FullModeOption {\n  return typeof modeOption !== \"string\";\n}\n\n/**\n * Obtains the mode-as-a-string from a mode object found in the configuration.\n * In config.yaml, you can write either:\n *   transitModes:    -or-   transitModes:\n *   - BUS                   - mode: BUS\n *   - RAIL                    label: Bus\n *                           - mode: RAIL\n *                             label: Commuter Rail\n *\n * @param modeObj The mode object per the configuration to convert.\n */\nexport function getModeString(modeObj: ModeOption): string {\n  return isFullModeOption(modeObj)\n    ? modeObj.mode\n    : modeObj;\n}\n\n/**\n * Of the specified companies, returns those that operate the specified modes.\n * @param companies The supported companies per OTP configuration.\n * @param modes The desired modes for which to get the operating companies.\n * @returns An array of companies that operate the specified modes (should not be undefined as companies is an array).\n */\nfunction getCompanies(companies: ConfiguredCompany[], modes: string[]): ConfiguredCompany[] {\n  return companies\n    .filter(\n      comp => comp.modes.split(\",\").filter(m => modes.includes(m)).length > 0\n    )\n    .filter(\n      comp => hasRental(comp.modes) || hasHail(comp.modes)\n    );\n}\n\n/**\n * Returns an array containing the company ids, in upper case for MOD UI URLs, for the specified mode id.\n * The mode id scheme is set and used by function getTransitCombinedModeOptions().\n * @param id The mode id to process.\n * @param supportedCompanies The list of supported companies (see structure in __mocks__/companies.js).\n */\nexport function getCompaniesForModeId(id: string, supportedCompanies: ConfiguredCompany[]): {\n  defaultAccessModeCompany?: string[];\n  companies: string[];\n  nonTransitModes: string[];\n} {\n  const newModes = id.split(\"+\");\n  const nonTransitModes = newModes.length > 1 ? [newModes[1]] : [\"WALK\"];\n  // TODO: for non-transit modes, should we also accommodate WALK+DRIVE, WALK+e-scooter??\n  // They already seem to work without WALK right now.\n\n  // Accommodate companies defined under accessModes.\n  // Convert company ID to upper case for passing to MOD UI URL.\n  const defaultAccessModeCompany =\n    newModes.length > 2 ? [newModes[2].toUpperCase()] : null;\n\n  // If there are multiple (scooter | bikeshare | etc.) companies,\n  // then if one is specified in the configured modes, then use that company.\n  // Otherwise, if this is for an exclusive mode (bike, scooter), then use all companies.\n  // Convert company IDs to upper case for passing to MOD UI URL.\n  // selectedCompanies is at least an empty array.\n  const companies =\n    defaultAccessModeCompany ||\n    getCompanies(supportedCompanies, nonTransitModes).map(comp =>\n      comp.id.toUpperCase()\n    );\n\n  return { defaultAccessModeCompany, companies, nonTransitModes };\n}\n\n/**\n * Returns the available transit modes (rail, bus, etc.).\n * @param ModeIcon The icon component for rendering.\n * @param modes The available modes to choose from.\n * @param selectedModes The modes that should appear selected.\n */\nexport function getTransitSubmodeOptions(\n  ModeIcon: ModeIconType,\n  modes: ConfiguredModes,\n  selectedModes: string[]\n): ModeSelectorOption[] {\n  const { transitModes } = modes;\n\n  // FIXME: If only one transit mode is available, select it.\n  return transitModes.map((modeObj: ModeOption) => {\n    const modeStr = getModeString(modeObj);\n    const modeLabel: string = isFullModeOption(modeObj)\n      ? modeObj.label\n      : null;\n\n    return {\n      id: modeStr,\n      selected: selectedModes.includes(modeStr),\n      text: (\n        <span>\n          <ModeIcon mode={modeStr} />\n          {modeLabel}\n        </span>\n      ),\n      title: modeLabel\n    };\n  });\n}\n\n/**\n * Returns the big primary \"Take Transit\" choice.\n * @param ModeIcon The icon component for rendering.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n * @param intl The IntlShape object from react-intl.\n * @param defaultMessages The default messages shown if no i18n messages are provided.\n */\nfunction getPrimaryModeOption(\n  ModeIcon: ModeIconType,\n  selectedModes: string[],\n  intl: IntlShape,\n  defaultMessages: Record<string, string>\n): ModeSelectorOption {\n  const title = intl.formatMessage({\n    defaultMessage: defaultMessages[\"otpUi.SettingsSelectorPanel.takeTransit\"],\n    description: \"Label for taking transit as main mode option.\",\n    id: \"otpUi.SettingsSelectorPanel.takeTransit\"\n  })\n  return {\n    id: \"TRANSIT\",\n    selected:\n      selectedModes.some(isTransit) &&\n      selectedModes.includes(\"WALK\"),\n    showTitle: false,\n    text: (\n      <span>\n        <ModeIcon mode=\"TRANSIT\" />\n        {title}\n      </span>\n    ),\n    title\n  };\n}\n\n/**\n * Returns the transit + access mode combinations.\n * @param icons The icon set to use.\n * @param modes The available modes to choose from.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n * @param selectedCompanies The companies to show as selected.\n * @param supportedCompanies The supported companies for certain modes.\n */\nfunction getTransitCombinedModeOptions(\n  ModeIcon: ModeIconType,\n  modes: ConfiguredModes,\n  selectedModes: string[],\n  selectedCompanies: string[],\n  supportedCompanies: ConfiguredCompany[]\n): ModeSelectorOption[] {\n  const { accessModes } = modes;\n  const modesHaveTransit = selectedModes.some(isTransit);\n\n  return (\n    accessModes &&\n    accessModes.map((modeObj: ModeOption) => {\n      const modeStr = getModeString(modeObj);\n      const { company: modeCompany = null, label: modeLabel = null } = isFullModeOption(modeObj)\n        ? modeObj\n        : {};\n      const modeCompanyUpper = modeCompany?.toUpperCase();\n\n      const company = modeCompany ? `+${modeCompany}` : \"\";\n      const id = `TRANSIT+${modeStr}${company}`;\n\n      const { companies } = getCompaniesForModeId(id, supportedCompanies);\n      const modeMonopoly = companies[0];\n      const CompanyIcon = getCompanyIcon(modeCompanyUpper || modeMonopoly || \"\");\n\n      /**\n       * We don't know in advance if a particular icon is supported by the ModeIcon component.\n       * Therefore, for rendering, we need to know whether one of the following\n       * did render something, so we know whether to fall back on the next icon.\n       * Hence the regular function call syntax rather than <Tags />.\n       *\n       * Access mode icons are processed in the order below, so that:\n       * - Any generic mode (e.g. BICYCLE_RENT) can be directly customized using `icons`,\n       * - Implementers can set icons for companies not in OTP-UI or override OTP-UI icons using `icons`,\n       *   using the scheme <OTP_MODE>_<COMPANY> (e.g. 'CAR_HAIL_UBER').\n       * - Icons for common companies (defined in the icons package) don't need to be specified in `icons`.\n       */\n      const finalIcon =\n        ModeIcon({ mode: modeStr }) ||\n        ModeIcon({ mode: `${modeStr}_${modeCompanyUpper}` }) ||\n        (CompanyIcon && <CompanyIcon />);\n\n      return {\n        id,\n        selected:\n          modesHaveTransit &&\n          selectedModes.includes(modeStr) &&\n          (!selectedCompanies.length ||\n            !modeCompanyUpper ||\n            selectedCompanies.includes(modeCompanyUpper)),\n        text: (\n          <span>\n            <ModeIcon mode=\"TRANSIT\" />+{finalIcon}\n          </span>\n        ),\n        title: modeLabel\n      };\n    })\n  );\n}\n\n/**\n * Returns the exclusive mode options.\n * @param ModeIcon The icon component for rendering.\n * @param modes The available modes to choose from.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n * @param intl The IntlShape object from react-intl.\n * @param defaultMessages The default messages shown if no i18n messages are provided.\n */\nfunction getExclusiveModeOptions(\n  ModeIcon: ModeIconType,\n  modes: ConfiguredModes,\n  selectedModes: string[],\n  intl: IntlShape,\n  defaultMessages: Record<string, string>\n): ModeSelectorOption[] {\n  const { exclusiveModes } = modes;\n\n  return getSupportedExclusiveModes(intl, defaultMessages)\n    .filter(({ mode }) => exclusiveModes && exclusiveModes.includes(mode))\n    .map(({ isActive, label, mode }) => ({\n      id: mode,\n      selected:\n        !selectedModes.some(isTransit) &&\n        selectedModes.some(isActive),\n      showTitle: false,\n      text: (\n        <span>\n          <ModeIcon mode={mode} /> {label}\n        </span>\n      ),\n      title: label\n    }));\n}\n\n/**\n * Generates the options (primary, secondary, tertiary) for the mode selector based on the modes read from config.yaml.\n * @param ModeIcon The icon component for rendering.\n * @param modes The available modes to choose from.\n * @param selectedModes An array of string that lists the modes selected for a trip query.\n * @param selectedCompanies The companies to show as selected (when the user selects an exclusive mode operated by multiple companies).\n * @param supportedCompanies The supported companies for certain access modes.\n * @param intl The IntlShape object from react-intl.\n * @param defaultMessages The default messages shown if no i18n messages are provided.\n */\nexport function getModeOptions(\n  ModeIcon: ModeIconType,\n  modes: ConfiguredModes,\n  selectedModes: string[],\n  selectedCompanies: string[],\n  supportedCompanies: ConfiguredCompany[],\n  intl: IntlShape,\n  defaultMessages: Record<string, string>\n): ModeSelectorOptionSet {\n  return {\n    primary: getPrimaryModeOption(ModeIcon, selectedModes, intl, defaultMessages),\n    secondary: getTransitCombinedModeOptions(\n      ModeIcon,\n      modes,\n      selectedModes,\n      selectedCompanies,\n      supportedCompanies\n    ),\n    tertiary: getExclusiveModeOptions(ModeIcon, modes, selectedModes, intl, defaultMessages)\n  };\n}\n\n/**\n * Returns the UI options for the specified companies, modes, and selection.\n * @param companies The supported companies per OTP configuration.\n * @param modes The desired modes for which to get the operating companies.\n * @param selectedCompanies The companies to render selected from the UI.\n * @returns An array of UI options (should not be undefined as companies is an array).\n */\nexport function getCompaniesOptions(\n  companies: ConfiguredCompany[],\n  modes: string[],\n  selectedCompanies: string[]\n): ModeSelectorOption[] {\n  return getCompanies(companies, modes).map((comp: ConfiguredCompany) => {\n    const CompanyIcon = getCompanyIcon(comp.id);\n\n    return {\n      id: comp.id,\n      selected: selectedCompanies.includes(comp.id),\n      text: (\n        <span>\n          {CompanyIcon && <CompanyIcon />} {comp.label}\n        </span>\n      ),\n      title: comp.label\n    };\n  });\n}\n\n/**\n * Returns the UI options for the specified bike/micromobility modes and selection.\n * @param ModeIcon The component for rendering icons.\n * @param modes The supported bike or micromobility modes.\n * @param selectedModes The modes to render selected from the UI.\n * @returns An array of UI options, or undefined if modes is undefined.\n */\nexport function getBicycleOrMicromobilityModeOptions(\n  ModeIcon: ModeIconType,\n  modes: ModeOption[],\n  selectedModes: string[]\n): ModeSelectorOption[] {\n  return (\n    modes && modes\n    .filter(isFullModeOption)\n    .map(({ label, mode }) => ({\n      id: mode,\n      selected: selectedModes.includes(mode),\n      text: (\n        <span>\n          <ModeIcon mode={mode} />\n          {label}\n        </span>\n      ),\n      title: label\n    }))\n  );\n}\n"],"file":"util.js"}