{"version":3,"sources":["../../src/TripOptions/index.tsx"],"names":["TripOptions","props","checkboxIcons","className","CompanyIcon","DetailedModeIcon","featuredItemOverlayBackButton","featuredItemOverlayEnabled","featuredItemOverlayShown","footer","onQueryParamChange","updateQueryParams","queryParams","QuestionIcon","SimpleModeIcon","supportedCompanies","supportedModes","tripOptionIconFillOverride","featuredOption","setFeaturedOption","queryParamOverrides","setQueryParamOverrides","initialTransitModes","filter","coreUtils","itinerary","isTransit","length","transit","mode","join","newQueryParams","categoryId","newParams","updatedSelectedModes","updatedSelectedTransit","replace","companies"],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for core-utils packages.\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport React, {\n  FunctionComponent,\n  ReactElement,\n  useEffect,\n  useState\n} from \"react\";\n\nimport GeneralSettingsPanel from \"../GeneralSettingsPanel\";\n\nimport FeaturedOption from \"./FeaturedOption\";\nimport FeaturedOptionOverlay from \"./FeaturedOptionOverlay\";\nimport { getSelectedModes } from \"./util\";\nimport ModeRow from \"./ModeRow\";\nimport TransitOptions from \"./TransitOptions\";\nimport { CheckboxIcons, Company, QueryParams, QueryProps } from \"./types\";\nimport * as S from \"./styled\";\n\ninterface ComponentProps {\n  /**\n   * Object of icon props used to overwrite the checkmark and plus icons\n   */\n  checkboxIcons?: CheckboxIcons;\n\n  /**\n   * Classnames to add to the container div to allow additional styling\n   */\n  className?: string;\n\n  /**\n   * Icon prop used for overwriting company logos throughout the component\n   */\n  CompanyIcon?: FunctionComponent<{ company: string }>;\n\n  /**\n   * Whether to display the built-in back button in the featured mode overlay. If the button is disabled,\n   * featuredItemOverlayEnabled should be used to hide the overlay.\n   */\n  featuredItemOverlayBackButton?: boolean;\n\n  /**\n   * If this prop is set to false, the featured item overlay will immediately disappear.\n   * This can be used in conjunction with featuredItemOverlayBackButton to replace the back\n   * button.\n   *\n   * If passing a useState hook to this component, this prop should be the value of the useState output.\n   */\n  featuredItemOverlayEnabled?: boolean;\n\n  /**\n   * If this prop is passed, any updates to the featured item overlay will be\n   * reported to the function passed. This can be used to keep track of if the overlay is open.\n   *\n   * If passing a useState hook to this component, this prop should be the setter of the useState output.\n   */\n  featuredItemOverlayShown?: (overlayShown: boolean) => void;\n\n  /**\n   * React element to be rendered below\n   * the rest of the element\n   */\n  footer?: ReactElement;\n\n  /**\n   * List of company objects to include in the\n   * featured options\n   */\n  supportedCompanies: Company[];\n\n  /**\n   * An optional prop to override svg fill color of CompanyIcons\n   * Note: this will only work if the image field of the option is an svg\n   */\n  tripOptionIconFillOverride?: string;\n\n  /**\n   * Icon prop used for overwriting mode icons throughout the component\n   */\n  SimpleModeIcon?: FunctionComponent<{ mode: string }>;\n\n  /**\n   * Icon prop used for overwriting the question mark icon throughout the component\n   */\n  QuestionIcon: ReactElement;\n\n  // DetailedModeIcon is defined in QueryProps\n}\n\ntype Props = ComponentProps & QueryProps;\n\n/**\n * This component renders the custom TriMet Mode Selector\n */\nexport default function TripOptions(props: Props): ReactElement {\n  const {\n    checkboxIcons,\n    className,\n    CompanyIcon,\n    DetailedModeIcon,\n    featuredItemOverlayBackButton,\n    featuredItemOverlayEnabled,\n    featuredItemOverlayShown,\n    footer,\n    onQueryParamChange: updateQueryParams,\n    queryParams,\n    QuestionIcon,\n    SimpleModeIcon,\n    supportedCompanies,\n    supportedModes,\n    tripOptionIconFillOverride\n  } = props;\n\n  const [featuredOption, setFeaturedOption] = useState(null);\n  const [queryParamOverrides, setQueryParamOverrides] = useState<{\n    [key: string]: QueryParams;\n  }>({});\n\n  // Populate the transit query param override if initial query params\n  // include transit modes\n  useEffect(() => {\n    const initialTransitModes = getSelectedModes(queryParams).filter(\n      coreUtils.itinerary.isTransit\n    );\n\n    if (initialTransitModes.length > 0) {\n      setQueryParamOverrides({\n        transit: {\n          mode: initialTransitModes.join(\",\")\n        }\n      });\n    }\n  }, []);\n\n  // Allow external closing\n  useEffect(() => {\n    if (featuredItemOverlayEnabled === false) {\n      setFeaturedOption(null);\n    }\n  }, [featuredItemOverlayEnabled]);\n\n  // Update callback when featuredItemOverlay changes\n  useEffect(() => {\n    featuredItemOverlayShown && featuredItemOverlayShown(!!featuredOption);\n  }, [featuredOption]);\n\n  // FIXME: move all query param handling to hook (object with category to queryParam mapping)\n  // THis will involve refactoring all sub-components to send category along with\n  // query param update. The refactor will be complex but the end result will be\n  // cleaner and simpler. Only this index component will handle queryParam generation,\n  // all others could work in only React space.\n  const onQueryParamChange = (\n    newQueryParams: QueryParams,\n    categoryId: string = null\n  ) => {\n    const newParams = { ...newQueryParams };\n\n    // Update transit override if changes are made to transit submodes\n    const updatedSelectedModes = getSelectedModes(newParams);\n    const updatedSelectedTransit = updatedSelectedModes.filter(\n      coreUtils.itinerary.isTransit\n    );\n    // Only update if the updated transit isn't \"TRANSIT\", since that would reset things\n    // when the user doesn't want them to be reset.\n    if (\n      updatedSelectedTransit.length > 0 &&\n      updatedSelectedTransit[0] !== \"TRANSIT\"\n    ) {\n      setQueryParamOverrides({\n        ...queryParamOverrides,\n        transit: { mode: updatedSelectedTransit.join(\",\") }\n      });\n    }\n\n    // Update category override\n    if (categoryId) {\n      // If custom transit is set, un-set it here (it will be replaced later)\n      if (\"transit\" in queryParamOverrides) {\n        newQueryParams.mode = newQueryParams.mode.replace(\n          queryParamOverrides.transit.mode,\n          \"TRANSIT\"\n        );\n      }\n      const { companies, mode } = newQueryParams;\n      setQueryParamOverrides({\n        ...queryParamOverrides,\n        [categoryId]: { companies, mode }\n      });\n    }\n\n    // Override transit if transit override is present\n    if (\n      updatedSelectedTransit[0] === \"TRANSIT\" &&\n      \"transit\" in queryParamOverrides\n    ) {\n      newParams.mode = newParams.mode.replace(\n        \"TRANSIT\",\n        queryParamOverrides.transit.mode\n      );\n    }\n    updateQueryParams(newParams);\n  };\n\n  if (featuredOption) {\n    return (\n      <S.TripOptionsContainer className={className}>\n        <FeaturedOptionOverlay\n          CompanyIcon={CompanyIcon}\n          DetailedModeIcon={DetailedModeIcon}\n          featuredOption={featuredOption}\n          setFeaturedOption={setFeaturedOption}\n          showBackButton={featuredItemOverlayBackButton}\n          supportedCompanies={supportedCompanies}\n          supportedModes={supportedModes}\n        />\n      </S.TripOptionsContainer>\n    );\n  }\n  return (\n    <S.TripOptionsContainer className={className}>\n      <ModeRow\n        checkboxIcons={checkboxIcons}\n        onQueryParamChange={onQueryParamChange}\n        queryParamOverrides={queryParamOverrides}\n        queryParams={queryParams}\n        SimpleModeIcon={SimpleModeIcon}\n        supportedModes={supportedModes}\n      />\n      <S.TripOptionsSubContainer>\n        <FeaturedOption\n          checkboxIcons={checkboxIcons}\n          DetailedModeIcon={DetailedModeIcon}\n          iconFillOverride={tripOptionIconFillOverride}\n          onQueryParamChange={onQueryParamChange}\n          queryParams={queryParams}\n          questionIcon={QuestionIcon}\n          setFeaturedOption={setFeaturedOption}\n          supportedModes={supportedModes}\n        />\n        <GeneralSettingsPanel\n          onQueryParamChange={onQueryParamChange}\n          query={queryParams}\n          supportedModes={supportedModes}\n        />\n        <TransitOptions\n          checkboxIcons={checkboxIcons}\n          DetailedModeIcon={DetailedModeIcon}\n          onQueryParamChange={onQueryParamChange}\n          queryParams={queryParams}\n          supportedModes={supportedModes}\n        />\n        {footer}\n      </S.TripOptionsSubContainer>\n    </S.TripOptionsContainer>\n  );\n}\n\nexport { S as Styled };\n"],"file":"index.js"}