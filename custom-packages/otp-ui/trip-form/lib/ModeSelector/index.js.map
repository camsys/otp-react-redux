{"version":3,"sources":["../../src/ModeSelector/index.tsx"],"names":["ModeSelector","className","modes","onChange","style","primary","secondary","tertiary","handleClick","option","selected","id","makeButton","showTitle","title","text","map"],"mappings":";;;;;;;;;AACA;;AAEA;;AACA;;;;;;AAwBA;AACA;AACA;AACA;AACe,SAASA,YAAT,CAAsB;AACnCC,EAAAA,SAAS,GAAG,IADuB;AAEnCC,EAAAA,KAAK,GAAG,IAF2B;AAGnCC,EAAAA,QAAQ,GAAG,IAHwB;AAInCC,EAAAA,KAAK,GAAG;AAJ2B,CAAtB,EAKqB;AAClC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAAmCL,KAAK,IAAI;AAChDG,IAAAA,OAAO,EAAE,IADuC;AAEhDC,IAAAA,SAAS,EAAE,IAFqC;AAGhDC,IAAAA,QAAQ,EAAE;AAHsC,GAAlD;AAKA,QAAMC,WAAW,GAAG,wBAClBC,MAAM,IAAI;AACR,QAAI,CAACA,MAAM,CAACC,QAAR,IAAoB,OAAOP,QAAP,KAAoB,UAA5C,EAAwD;AACtDA,MAAAA,QAAQ,CAACM,MAAM,CAACE,EAAR,CAAR;AACD;AACF,GALiB,EAMlB,CAACR,QAAD,CANkB,CAApB;;AASA,QAAMS,UAAU,GAAIH,MAAD,iBACjB,6BAAC,mBAAD;AACE,IAAA,GAAG,EAAEA,MAAM,CAACE,EADd;AAEE,IAAA,QAAQ,EAAEF,MAAM,CAACC,QAFnB;AAGE,IAAA,SAAS,EAAED,MAAM,CAACI,SAHpB;AAIE,IAAA,KAAK,EAAEJ,MAAM,CAACK,KAJhB;AAKE,IAAA,OAAO,EAAE,MAAMN,WAAW,CAACC,MAAD;AAL5B,KAOGA,MAAM,CAACM,IAPV,CADF;;AAYA,sBACE,6BAAC,CAAD,CAAG,YAAH;AAAgB,IAAA,SAAS,EAAEd,SAA3B;AAAsC,IAAA,KAAK,EAAEG;AAA7C,KACGC,OAAO,iBACN,6BAAC,CAAD,CAAG,YAAH,CAAgB,OAAhB,QAAyBO,UAAU,CAACP,OAAD,CAAnC,CAFJ,EAKGC,SAAS,iBACR,6BAAC,CAAD,CAAG,YAAH,CAAgB,YAAhB,QACGA,SAAS,CAACU,GAAV,CAAcJ,UAAd,CADH,CANJ,EAUGL,QAAQ,iBACP,6BAAC,CAAD,CAAG,YAAH,CAAgB,WAAhB,QACGA,QAAQ,CAACS,GAAT,CAAaJ,UAAb,CADH,CAXJ,CADF;AAkBD","sourcesContent":["import CSS from \"csstype\";\nimport React, { ReactElement, useCallback } from \"react\";\n\nimport * as S from \"../styled\";\nimport ModeButton from \"../ModeButton\";\n\nimport { ModeSelectorOption, ModeSelectorOptionSet } from \"../types\";\n\ninterface ModeSelectorProps {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className?: string;\n  /**\n   * An object that defines the primary mode, and secondary and tertiary modes for the trip query.\n   */\n  modes: ModeSelectorOptionSet;\n  /**\n   * Triggered when the user selects a different mode.\n   * @param id The id of the new option clicked.\n   */\n  onChange: (InputEvent) => void;\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n}\n\n/**\n * ModeSelector is the control container where the OTP user selects\n * the transportation modes for a trip query, e.g. transit+bike, walk, micromobility...\n */\nexport default function ModeSelector({\n  className = null,\n  modes = null,\n  onChange = null,\n  style = null\n}: ModeSelectorProps): ReactElement {\n  const { primary, secondary, tertiary } = modes || {\n    primary: null,\n    secondary: null,\n    tertiary: null\n  };\n  const handleClick = useCallback(\n    option => {\n      if (!option.selected && typeof onChange === \"function\") {\n        onChange(option.id);\n      }\n    },\n    [onChange]\n  );\n\n  const makeButton = (option: ModeSelectorOption): ReactElement => (\n    <ModeButton\n      key={option.id}\n      selected={option.selected}\n      showTitle={option.showTitle}\n      title={option.title}\n      onClick={() => handleClick(option)}\n    >\n      {option.text}\n    </ModeButton>\n  );\n\n  return (\n    <S.ModeSelector className={className} style={style}>\n      {primary && (\n        <S.ModeSelector.MainRow>{makeButton(primary)}</S.ModeSelector.MainRow>\n      )}\n\n      {secondary && (\n        <S.ModeSelector.SecondaryRow>\n          {secondary.map(makeButton)}\n        </S.ModeSelector.SecondaryRow>\n      )}\n      {tertiary && (\n        <S.ModeSelector.TertiaryRow>\n          {tertiary.map(makeButton)}\n        </S.ModeSelector.TertiaryRow>\n      )}\n    </S.ModeSelector>\n  );\n}\n"],"file":"index.js"}