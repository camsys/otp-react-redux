{"version":3,"sources":["../../src/TripOptions/ModeRow.tsx"],"names":["ModeRow","checkboxIcons","onQueryParamChange","queryParamOverrides","queryParams","SimpleModeIcon","supportedModes","categories","selectedModes","selectedTransit","filter","coreUtils","itinerary","isTransit","hasTransit","length","selectedTransitString","join","setModeToTransit","companies","mode","initialRenderRef","isServerEnv","current","scrollIntoView","behavior","block","inline","map","category","selectedModeAndCategoryActive","isChecked","type","onChangeMode","id","override","replace","includes","options","o","company","label"],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for core-utils packages.\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport React, { useRef, useEffect } from \"react\";\n\nimport {\n  categoryIsActive,\n  getCategoryPrimaryMode,\n  getSelectedModes,\n  isServerEnv\n} from \"./util\";\nimport { CheckboxIcons, Modes, QueryParams } from \"./types\";\nimport * as S from \"./styled\";\n\nimport Checkbox from \"./Checkbox\";\n\nconst ModeRow = ({\n  checkboxIcons,\n  onQueryParamChange,\n  queryParamOverrides,\n  queryParams,\n  SimpleModeIcon,\n  supportedModes\n}: {\n  onQueryParamChange(paramsToUpdate: QueryParams, categoryId?: string): void;\n  checkboxIcons?: CheckboxIcons;\n  queryParamOverrides: { [key: string]: QueryParams };\n  queryParams: QueryParams;\n  SimpleModeIcon?: React.FunctionComponent<{ mode: string }>;\n  supportedModes: Modes;\n}): React.ReactElement => {\n  const { categories } = supportedModes;\n  const selectedModes = getSelectedModes(queryParams);\n  const selectedTransit = selectedModes.filter(coreUtils.itinerary.isTransit);\n  const hasTransit = selectedTransit.length > 0;\n  const selectedTransitString = selectedTransit.join(\",\") || \"TRANSIT\";\n  const setModeToTransit = () =>\n    onQueryParamChange({\n      companies: \"\",\n      mode: `${selectedTransitString},WALK`\n    });\n\n  // Scroll to active mode on initial render\n  // This ref is attached to every active mode checkbox\n  const initialRenderRef = useRef() as React.MutableRefObject<HTMLInputElement>;\n\n  useEffect(() => {\n    // Non-DOM environments don't support scrollIntoView\n    // Also disable for modes that have transit to prevent confusing\n    // and unnecessary scrolling\n    if (!isServerEnv && !hasTransit) {\n      initialRenderRef?.current?.scrollIntoView({\n        behavior: \"auto\",\n        // Ideally there is no vertical scrolling, but if this likely non-effective\n        // scrolling is acceptable, then it is simpler\n        block: \"end\",\n        inline: \"center\"\n      });\n    }\n  }, []);\n\n  return (\n    /* Not hiding the scrollbars here ensures the user can still scroll. Scrollbars are hidden using CSS. */\n    <S.ScrollableRow hideScrollbars={false}>\n      <Checkbox\n        ariaLabel=\"Go by Transit\"\n        checkboxIcons={checkboxIcons}\n        checked={hasTransit}\n        // Prettier conflicts with jsx style rules\n        // eslint-disable-next-line prettier/prettier\n        onClick={setModeToTransit}\n        selected={hasTransit}\n        SimpleModeIcon={SimpleModeIcon}\n      >\n        Go by Transit\n      </Checkbox>\n      {categories.map(category => {\n        const selectedModeAndCategoryActive = categoryIsActive(\n          category,\n          selectedModes\n        );\n        const isChecked = hasTransit\n          ? category.type === \"access\" && selectedModeAndCategoryActive\n          : category.type === \"exclusive\" && selectedModeAndCategoryActive;\n\n        const onChangeMode = () => {\n          // If clicking on a mode that's active, reset to transit only\n          if (isChecked) {\n            setModeToTransit();\n            return;\n          }\n\n          // Use override query if present\n          if (queryParamOverrides && queryParamOverrides[category.id]) {\n            const override = queryParamOverrides[category.id];\n            // Ensure exclusive modes that share IDs with non-exclusive modes don't have transit\n            if (category.type === \"exclusive\") {\n              override.mode = override.mode?.replace(\"TRANSIT,\", \"\");\n            }\n            // Ensure access modes that share IDs with exclusive modes include transit\n            if (\n              category.type !== \"exclusive\" &&\n              !override.mode?.includes(\"TRANSIT\")\n            ) {\n              override.mode = `TRANSIT,${override.mode}`;\n            }\n\n            onQueryParamChange(override, category.id);\n            return;\n          }\n\n          let mode = getCategoryPrimaryMode(category);\n          const companies =\n            typeof category.mode === \"undefined\"\n              ? \"\"\n              : category.options?.map(o => o.company).join(\",\") || \"\";\n          if (category.type === \"access\") {\n            mode = isChecked\n              ? selectedTransitString\n              : `${selectedTransitString},${mode}`;\n          }\n          onQueryParamChange({ companies, mode }, category.id);\n        };\n        // All Tri-Met categories either have a mode or the first option does\n        const mode =\n          category.mode || (category.options && category.options[0].mode);\n        return (\n          <Checkbox\n            ariaLabel={category.label}\n            checkboxIcons={checkboxIcons}\n            checked={isChecked}\n            key={`access-${category.label}`}\n            mode={mode}\n            onClick={onChangeMode}\n            innerRef={isChecked ? initialRenderRef : null}\n            selected={isChecked}\n            SimpleModeIcon={SimpleModeIcon}\n          >\n            {category.label}\n          </Checkbox>\n        );\n      })}\n    </S.ScrollableRow>\n  );\n};\n\nexport default ModeRow;\n"],"file":"ModeRow.js"}