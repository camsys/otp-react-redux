{"version":3,"sources":["../../src/SettingsSelectorPanel/index.tsx"],"names":["isMicromobility","isTransit","coreUtils","itinerary","getSelectedCompanies","queryParams","companies","split","getSelectedModes","mode","modes","query","reduceOtpFlexModes","SettingsSelectorPanel","className","ModeIcon","TriMetModeIcon","onQueryParamChange","queryParamMessages","style","supportedCompanies","supportedModes","defaultAccessModeCompany","setDefaultAccessModeCompany","lastTransitModes","setLastTransitModes","selectedModes","selectedCompanies","handleQueryParamChange","queryParam","toggleSubmode","name","id","submodes","filter","o","after","newSubmodes","concat","idx","indexOf","subset","length","splice","push","join","handleMainModeChange","newModes","activeTransitModes","lastOrAllTransitModes","transitModes","map","getModeString","defAccessModeCompany","nonTransitModes","finalModes","handleTransitModeChange","handleCompanyChange","undefined","intl","queryParamMessagesWithI18nAndCustomizations","modeOptions","defaultMessages","m","comp","bikeModes","bicycleModes","scooterModes","micromobilityModes","submodeLabel","submodeCompaniesLabel","margin","paddingBottom","some","isBike"],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for core-utils packages.\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport CSS from \"csstype\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for the icons package.\nimport { TriMetModeIcon } from \"@opentripplanner/icons\";\nimport React, { ReactElement, useCallback, useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nimport ModeSelector from \"../ModeSelector\";\nimport SubmodeSelector from \"../SubmodeSelector\";\nimport GeneralSettingsPanel from \"../GeneralSettingsPanel\";\nimport * as S from \"../styled\";\nimport {\n  getModeOptions,\n  getTransitSubmodeOptions,\n  getCompaniesForModeId,\n  getCompaniesOptions,\n  getBicycleOrMicromobilityModeOptions,\n  getModeString,\n  isBike\n} from \"../util\";\n// eslint-disable-next-line prettier/prettier\nimport type {\n  ConfiguredCompany,\n  ConfiguredModes,\n  CustomQueryParameters,\n  ModeIconType,\n  QueryParamChangeEvent,\n  QueryParams\n} from \"../types\";\n\nimport {\n  defaultMessages,\n  getQueryParamMessagesWithI18n\n} from \"./query-params-i18n\";\n\nconst { isMicromobility, isTransit } = coreUtils.itinerary;\n\ninterface SettingsSelectorPanelProps {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className?: string;\n  /**\n   * The icon component for rendering mode icons. Defaults to the OTP-UI TriMetModeIcon component.\n   */\n  ModeIcon?: ModeIconType;\n  /**\n   * Triggered when a query parameter is changed.\n   * @param params An object that contains the new values for the parameter(s) that has (have) changed.\n   */\n  onQueryParamChange?: (evt: QueryParamChangeEvent) => void;\n  /**\n   * An object {parameterName: value, ...} whose attributes correspond to query parameters.\n   * For query parameter names and value formats,\n   * see https://github.com/opentripplanner/otp-ui/blob/master/packages/core-utils/src/__tests__/query.js#L14\n   */\n  queryParams?: QueryParams;\n  /**\n   * An optional object that defines customizations for certain query parameters\n   * to change the label or list of options (both text and values) displayed for the desired parameters.\n   * Customizations can be as few or as many as needed.\n   * For a given parameter, default values from core-utils are used if no customization is provided.\n   * If custom options are provided for a parameter, only those provided will be displayed.\n   *\n   * For query parameter names and value formats,\n   * see https://github.com/opentripplanner/otp-ui/blob/master/packages/core-utils/src/__tests__/query.js#L14\n   */\n  queryParamMessages?: CustomQueryParameters;\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n  /**\n   * An array of supported companies that will be displayed as options where applicable.\n   */\n  supportedCompanies?: ConfiguredCompany[];\n  /**\n   * Supported modes that will be displayed as primary, secondary, tertiary options.\n   */\n  supportedModes: ConfiguredModes;\n}\n\nfunction getSelectedCompanies(queryParams: QueryParams) {\n  const { companies } = queryParams;\n  return companies ? companies.split(\",\") : [];\n}\n\nfunction getSelectedModes(queryParams: QueryParams) {\n  const { mode } = queryParams;\n  const modes = mode ? mode.split(\",\") : [];\n\n  // Map OTP Flex modes to custom flex mode\n  return coreUtils.query.reduceOtpFlexModes(modes);\n}\n\n/**\n * The Settings Selector Panel allows the user to set trip search preferences,\n * such as modes, providers, and speed preferences.\n */\nexport default function SettingsSelectorPanel({\n  className = null,\n  ModeIcon = TriMetModeIcon,\n  onQueryParamChange = null,\n  queryParams = null,\n  queryParamMessages = null,\n  style = null,\n  supportedCompanies = [],\n  supportedModes = null\n}: SettingsSelectorPanelProps): ReactElement {\n  const [defaultAccessModeCompany, setDefaultAccessModeCompany] = useState(\n    null\n  );\n  const [lastTransitModes, setLastTransitModes] = useState([]);\n\n  const selectedModes = getSelectedModes(queryParams);\n  const selectedCompanies = getSelectedCompanies(queryParams);\n\n  const handleQueryParamChange = useCallback(\n    (queryParam: QueryParamChangeEvent) => {\n      if (typeof onQueryParamChange === \"function\") {\n        onQueryParamChange(queryParam);\n      }\n    },\n    [onQueryParamChange]\n  );\n\n  const toggleSubmode = useCallback(\n    (name, id, submodes, filter = o => o, after) => {\n      const newSubmodes = [].concat(submodes);\n      const idx = newSubmodes.indexOf(id);\n\n      // If the clicked mode is selected, then unselect it, o/w select it.\n      // Leave at least one selected, as in newplanner.trimet.org.\n      if (idx >= 0) {\n        const subset = newSubmodes.filter(filter);\n        if (subset.length >= 2) {\n          newSubmodes.splice(idx, 1);\n        }\n      } else {\n        newSubmodes.push(id);\n      }\n\n      if (newSubmodes.length !== submodes.length) {\n        handleQueryParamChange({\n          [name]: newSubmodes.join(\",\")\n        });\n        if (after) after(newSubmodes);\n      }\n    },\n    [onQueryParamChange]\n  );\n\n  const handleMainModeChange = useCallback(\n    (id: string) => {\n      const newModes = id.split(\"+\");\n\n      if (newModes[0] === \"TRANSIT\") {\n        const activeTransitModes = selectedModes.filter(isTransit);\n\n        const lastOrAllTransitModes =\n          lastTransitModes.length === 0\n            ? supportedModes.transitModes.map(getModeString)\n            : lastTransitModes;\n\n        const {\n          defaultAccessModeCompany: defAccessModeCompany,\n          companies,\n          nonTransitModes\n        } = getCompaniesForModeId(id, supportedCompanies);\n\n        // Add previously selected transit modes only if none were active.\n        const finalModes = (activeTransitModes.length > 0\n          ? activeTransitModes\n          : lastOrAllTransitModes\n        ).concat(nonTransitModes);\n\n        handleQueryParamChange({\n          companies: companies.join(\",\"),\n          mode: finalModes.join(\",\")\n        });\n\n        setDefaultAccessModeCompany(\n          defAccessModeCompany && defAccessModeCompany[0]\n        );\n      } else {\n        handleQueryParamChange({\n          companies: \"\", // New req: Don't list companies with this mode?\n          mode: newModes.join(\",\")\n        });\n      }\n    },\n    [onQueryParamChange, queryParams, lastTransitModes]\n  );\n\n  const handleTransitModeChange = useCallback(\n    (id: string) =>\n      toggleSubmode(\"mode\", id, selectedModes, isTransit, newModes =>\n        setLastTransitModes(newModes.filter(isTransit))\n      ),\n    [onQueryParamChange, queryParams]\n  );\n\n  const handleCompanyChange = useCallback(\n    (id: string) =>\n      toggleSubmode(\"companies\", id, selectedCompanies, undefined, () => {}),\n    [onQueryParamChange, queryParams]\n  );\n\n  const intl = useIntl();\n  const queryParamMessagesWithI18nAndCustomizations = {\n    ...getQueryParamMessagesWithI18n(intl),\n    ...queryParamMessages\n  };\n\n  const modeOptions = getModeOptions(\n    ModeIcon,\n    supportedModes,\n    selectedModes,\n    selectedCompanies,\n    supportedCompanies,\n    intl,\n    defaultMessages\n  );\n  const transitModes = getTransitSubmodeOptions(\n    ModeIcon,\n    supportedModes,\n    selectedModes\n  );\n  const nonTransitModes = selectedModes.filter(m => !isTransit(m));\n  const companies = getCompaniesOptions(\n    supportedCompanies.filter(comp =>\n      defaultAccessModeCompany ? comp.id === defaultAccessModeCompany : true\n    ),\n    nonTransitModes,\n    selectedCompanies\n  );\n  const bikeModes = getBicycleOrMicromobilityModeOptions(\n    ModeIcon,\n    supportedModes.bicycleModes,\n    selectedModes\n  );\n  const scooterModes = getBicycleOrMicromobilityModeOptions(\n    ModeIcon,\n    supportedModes.micromobilityModes,\n    selectedModes\n  );\n\n  const submodeLabel = (\n    <FormattedMessage\n      defaultMessage={defaultMessages[\"otpUi.SettingsSelectorPanel.use\"]}\n      description=\"Text announcing a list of submodes to use.\"\n      id=\"otpUi.SettingsSelectorPanel.use\"\n    />\n  );\n  const submodeCompaniesLabel = (\n    <FormattedMessage\n      defaultMessage={\n        defaultMessages[\"otpUi.SettingsSelectorPanel.useCompanies\"]\n      }\n      description=\"Text announcing a list of rental companies to use.\"\n      id=\"otpUi.SettingsSelectorPanel.useCompanies\"\n    />\n  );\n\n  return (\n    <S.SettingsSelectorPanel className={className} style={style}>\n      <ModeSelector\n        modes={modeOptions}\n        onChange={handleMainModeChange}\n        style={{ margin: \"0px -5px\", paddingBottom: \"8px\" }}\n      />\n\n      <S.SettingsHeader>\n        <FormattedMessage\n          defaultMessage={\n            defaultMessages[\"otpUi.SettingsSelectorPanel.travelPreferences\"]\n          }\n          description=\"Header text for the travel preferences.\"\n          id=\"otpUi.SettingsSelectorPanel.travelPreferences\"\n        />\n      </S.SettingsHeader>\n\n      {selectedModes.some(isTransit) && transitModes.length >= 2 && (\n        <SubmodeSelector\n          label={submodeLabel}\n          modes={transitModes}\n          onChange={handleTransitModeChange}\n        />\n      )}\n\n      {/* The bike trip type selector */}\n      {/* TODO: Handle different bikeshare networks */}\n      {selectedModes.some(isBike) && !selectedModes.some(isTransit) && (\n        <SubmodeSelector\n          label={submodeLabel}\n          inline\n          modes={bikeModes}\n          onChange={handleMainModeChange}\n        />\n      )}\n\n      {/* The micromobility trip type selector */}\n      {/* TODO: Handle different micromobility networks */}\n      {selectedModes.some(isMicromobility) &&\n        !selectedModes.some(isTransit) && (\n          <SubmodeSelector\n            label={submodeLabel}\n            inline\n            modes={scooterModes}\n            onChange={handleMainModeChange}\n          />\n        )}\n\n      {/* This order is probably better. */}\n      {companies.length >= 2 && (\n        <SubmodeSelector\n          label={submodeCompaniesLabel}\n          modes={companies}\n          onChange={handleCompanyChange}\n        />\n      )}\n\n      <GeneralSettingsPanel\n        query={queryParams}\n        queryParamMessages={queryParamMessagesWithI18nAndCustomizations}\n        supportedModes={supportedModes}\n        onQueryParamChange={handleQueryParamChange}\n      />\n    </S.SettingsSelectorPanel>\n  );\n}\n"],"file":"index.js"}