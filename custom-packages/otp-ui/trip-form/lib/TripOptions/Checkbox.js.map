{"version":3,"sources":["../../src/TripOptions/Checkbox.tsx"],"names":["Checkbox","props","ariaChecked","ariaLabel","checkboxIcons","checked","children","className","disabled","innerRef","inset","mode","onClick","selected","SimpleModeIcon","TriMetModeIcon","modeIcon","GreenCheck","S","PlusIcon","unchecked","UncheckedIcon"],"mappings":";;;;;;;;;AAAA;;AAGA;;AACA;;;;;;AAHA;AACA;AAgBe,SAASA,QAAT,CACbC,KADa,EASC;AACd,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,SANI;AAOJC,IAAAA,QAPI;AAQJC,IAAAA,QARI;AASJC,IAAAA,KATI;AAUJC,IAAAA,IAVI;AAWJC,IAAAA,OAXI;AAYJC,IAAAA,QAZI;AAaJ;AACAC,IAAAA,cAAc,GAAGC;AAdb,MAeFd,KAfJ;;AAiBA,QAAMe,QAAQ,GAAGL,IAAI,iBAAI,6BAAC,cAAD;AAAgB,IAAA,IAAI,EAAEA;AAAtB,IAAzB;;AACA,QAAMM,UAAU,GAAG,CAAAb,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEC,OAAf,KAA0Ba,CAAC,CAACD,UAA/C;AACA,QAAME,QAAQ,GAAG,CAAAf,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEgB,SAAf,KAA4BF,CAAC,CAACG,aAA/C;AAEA,sBACE,6BAAC,CAAD,CAAG,QAAH;AACE,IAAA,WAAW,EAAEnB,WADf;AAEE,IAAA,SAAS,EAAEC,SAFb;AAGE,IAAA,SAAS,EAAEI,SAHb;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAKE,IAAA,KAAK,EAAEE,KALT;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,GAAG,EAAEF,QAPP;AAQE,IAAA,OAAO,EAAEG,OARX;AASE,IAAA,QAAQ,EAAEC;AATZ,KAWGF,IAAI,iBAAI,6BAAC,CAAD,CAAG,eAAH,QAAoBK,QAApB,CAXX,EAYGX,OAAO,gBAAG,6BAAC,UAAD,OAAH,gBAAoB,6BAAC,QAAD,OAZ9B,EAaGC,QAbH,CADF;AAiBD","sourcesContent":["import React, { FunctionComponent, ReactElement } from \"react\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for the icons package.\nimport { TriMetModeIcon2021 as TriMetModeIcon } from \"@opentripplanner/icons\";\nimport * as S from \"./styled\";\nimport { CheckboxIcons } from \"./types\";\n\n// FIXME: Move this to @opentripplanner/types added in https://github.com/opentripplanner/otp-ui/pull/281\nexport interface ButtonProps {\n  ariaChecked?: boolean;\n  ariaLabel?: string;\n  disabled?: boolean;\n  inset?: boolean;\n  mode?: string;\n  onClick(): void;\n  selected: boolean;\n}\n\nexport default function Checkbox(\n  props: {\n    checkboxIcons?: CheckboxIcons;\n    checked: boolean;\n    children: React.ReactNode | string;\n    className?: string;\n    innerRef?: React.MutableRefObject<HTMLInputElement>;\n    SimpleModeIcon?: FunctionComponent<{ mode: string }>;\n  } & ButtonProps\n): ReactElement {\n  const {\n    ariaChecked,\n    ariaLabel,\n    checkboxIcons,\n    checked,\n    children,\n    className,\n    disabled,\n    innerRef,\n    inset,\n    mode,\n    onClick,\n    selected,\n    // If no icon is passed, TriMetModIcon is the default\n    SimpleModeIcon = TriMetModeIcon\n  } = props;\n\n  const modeIcon = mode && <SimpleModeIcon mode={mode} />;\n  const GreenCheck = checkboxIcons?.checked || S.GreenCheck;\n  const PlusIcon = checkboxIcons?.unchecked || S.UncheckedIcon;\n\n  return (\n    <S.Checkbox\n      ariaChecked={ariaChecked}\n      ariaLabel={ariaLabel}\n      className={className}\n      disabled={disabled}\n      inset={inset}\n      mode={mode}\n      ref={innerRef}\n      onClick={onClick}\n      selected={selected}\n    >\n      {mode && <S.ModeIconWrapper>{modeIcon}</S.ModeIconWrapper>}\n      {checked ? <GreenCheck /> : <PlusIcon />}\n      {children}\n    </S.Checkbox>\n  );\n}\n"],"file":"Checkbox.js"}