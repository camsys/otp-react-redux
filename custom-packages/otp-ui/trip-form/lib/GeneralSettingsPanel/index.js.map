{"version":3,"sources":["../../src/GeneralSettingsPanel/index.tsx"],"names":["GeneralSettingsPanel","className","onQueryParamChange","paramNames","coreUtils","query","defaultParams","queryParamMessages","style","supportedModes","handleChange","queryParam","configWrapper","modes","map","param","paramInfo","queryParams","getCustomQueryParams","find","qp","name","routingTypes","includes","routingType","applicable","label","getQueryParamProperty","icon","selector","default"],"mappings":";;;;;;;;;AAEA;;AAEA;;AAEA;;AACA;;AACA;;;;;;AARA;AACA;;AA0DA;AACA;AACA;AACe,SAASA,oBAAT,CAA8B;AAC3CC,EAAAA,SAAS,GAAG,IAD+B;AAE3CC,EAAAA,kBAAkB,GAAG,IAFsB;AAG3CC,EAAAA,UAAU,GAAGC,mBAAUC,KAAV,CAAgBC,aAHc;AAI3CD,EAAAA,KAAK,GAAG,IAJmC;AAK3CE,EAAAA,kBAAkB,GAAG,IALsB;AAM3CC,EAAAA,KAN2C;AAO3CC,EAAAA;AAP2C,CAA9B,EAQ6B;AAC1C,QAAMC,YAAY,GAAG,wBAClBC,UAAD,IAAuC;AACrC,QAAI,OAAOT,kBAAP,KAA8B,UAAlC,EAA8C;AAC5CA,MAAAA,kBAAkB,CAACS,UAAD,CAAlB;AACD;AACF,GALkB,EAMnB,CAACT,kBAAD,CANmB,CAArB;AASA,QAAMU,aAAa,GAAG;AAAEC,IAAAA,KAAK,EAAEJ;AAAT,GAAtB;AAEA,sBACE,6BAAC,CAAD,CAAG,oBAAH;AAAwB,IAAA,SAAS,EAAER,SAAnC;AAA8C,IAAA,KAAK,EAAEO;AAArD,KACGL,UAAU,CAACW,GAAX,CAAeC,KAAK,IAAI;AACvB,UAAMC,SAAS,GAAGZ,mBAAUa,WAAV,CACfC,oBADe,CACMX,kBADN,EAEfY,IAFe,CAEVC,EAAE,IAAIA,EAAE,CAACC,IAAH,KAAYN,KAFR,CAAlB,CADuB,CAIvB;;;AACA,QAAI,CAACC,SAAS,CAACM,YAAV,CAAuBC,QAAvB,CAAgClB,KAAK,CAACmB,WAAtC,CAAL,EAAyD,OAAO,IAAP,CALlC,CAOvB;;AACA,QACE,OAAOR,SAAS,CAACS,UAAjB,KAAgC,UAAhC,IACA,CAACT,SAAS,CAACS,UAAV,CAAqBpB,KAArB,EAA4BO,aAA5B,CAFH,EAGE;AACA,aAAO,IAAP;AACD;;AAED,UAAMc,KAAK,GAAGtB,mBAAUC,KAAV,CAAgBsB,qBAAhB,CACZX,SADY,EAEZ,OAFY,EAGZX,KAHY,CAAd;;AAKA,UAAMuB,IAAI,GAAGxB,mBAAUC,KAAV,CAAgBsB,qBAAhB,CACXX,SADW,EAEX,MAFW,EAGXX,KAHW,CAAb,CApBuB,CA0BvB;;;AACA,YAAQW,SAAS,CAACa,QAAlB;AACE,WAAK,UAAL;AACE,4BACE,6BAAC,yBAAD;AACE,UAAA,GAAG,EAAEb,SAAS,CAACK,IADjB;AAEE,UAAA,KAAK,EAAEK,KAFT;AAGE,UAAA,IAAI,EAAEV,SAAS,CAACK,IAHlB;AAIE,UAAA,QAAQ,EAAEX,YAJZ;AAKE,UAAA,OAAO,EAAEN,mBAAUC,KAAV,CAAgBsB,qBAAhB,CACPX,SADO,EAEP,SAFO,EAGPX,KAHO,CALX;AAUE,UAAA,KAAK,EAAEA,KAAK,CAACW,SAAS,CAACK,IAAX,CAAL,IAAyBL,SAAS,CAACc;AAV5C,UADF;;AAcF,WAAK,UAAL;AACE,4BACE,6BAAC,yBAAD;AACE,UAAA,GAAG,EAAEd,SAAS,CAACU,KADjB;AAEE,UAAA,KAAK,eACH,4DACGE,IADH,EAEGF,KAFH,CAHJ;AAQE,UAAA,IAAI,EAAEV,SAAS,CAACK,IARlB;AASE,UAAA,QAAQ,EAAEX,YATZ;AAUE,UAAA,KAAK,EAAEL,KAAK,CAACW,SAAS,CAACK,IAAX;AAVd,UADF;;AAcF;AACE,eAAO,IAAP;AAhCJ;AAkCD,GA7DA,CADH,CADF;AAkED","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for core-utils packages.\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport CSS from \"csstype\";\nimport React, { ReactElement, useCallback } from \"react\";\n\nimport CheckboxSelector from \"../CheckboxSelector\";\nimport DropdownSelector from \"../DropdownSelector\";\nimport * as S from \"../styled\";\n\n// eslint-disable-next-line prettier/prettier\nimport type { ConfiguredModes, CustomQueryParameters, QueryParamChangeEvent } from \"../types\";\nimport type { QueryParams } from \"../TripOptions/types\";\n\ninterface GeneralSettingsPanelProps {\n  /**\n   * The CSS class name to apply to this element.\n   */\n  className?: string;\n  /**\n   * An object {parameterName: value, ...} whose attributes correspond to query parameters.\n   * For query parameter names and value formats,\n   * see https://github.com/opentripplanner/otp-ui/blob/master/packages/core-utils/src/__tests__/query.js#L14\n   */\n  // Disable type check because the only use of queryParams is to be passed to\n  // method getQueryParamProperty from \"@opentripplanner/core-utils/query\".\n  // eslint-disable-next-line react/forbid-prop-types\n  query?: QueryParams;\n  /**\n   * An optional object that defines customizations for certain query parameters\n   * to change the label or list of options (both text and values) displayed for the desired parameters.\n   * Customizations can be as few or as many as needed.\n   * For a given parameter, default values from core-utils are used if no customization is provided.\n   * If custom options are provided for a parameter, only those provided will be displayed.\n   *\n   * For query parameter names and value formats,\n   * see https://github.com/opentripplanner/otp-ui/blob/master/packages/core-utils/src/__tests__/query.js#L14\n   */\n  queryParamMessages?: CustomQueryParameters;\n  /**\n   * An array of parameter names to support in the settings panel.\n   * See the `query` parameter for more on query parameter names.\n   */\n  paramNames?: string[];\n  /**\n   * Triggered when the value of a trip setting is changed by the user.\n   * @param arg The data {name: value} of the changed trip setting.\n   */\n  onQueryParamChange?: (e: QueryParamChangeEvent) => void;\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n  /**\n   * An array of supported modes that will be displayed as options.\n   */\n  supportedModes: ConfiguredModes;\n}\n\n/**\n * The general settings panel for setting speed and routing optimization controls.\n */\nexport default function GeneralSettingsPanel({\n  className = null,\n  onQueryParamChange = null,\n  paramNames = coreUtils.query.defaultParams,\n  query = null,\n  queryParamMessages = null,\n  style,\n  supportedModes\n}: GeneralSettingsPanelProps): ReactElement {\n  const handleChange = useCallback(\n    (queryParam: QueryParamChangeEvent) => {\n      if (typeof onQueryParamChange === \"function\") {\n        onQueryParamChange(queryParam);\n      }\n    },\n    [onQueryParamChange]\n  );\n\n  const configWrapper = { modes: supportedModes };\n\n  return (\n    <S.GeneralSettingsPanel className={className} style={style}>\n      {paramNames.map(param => {\n        const paramInfo = coreUtils.queryParams\n          .getCustomQueryParams(queryParamMessages)\n          .find(qp => qp.name === param);\n        // Check that the parameter applies to the specified routingType\n        if (!paramInfo.routingTypes.includes(query.routingType)) return null;\n\n        // Check that the applicability test (if provided) is satisfied\n        if (\n          typeof paramInfo.applicable === \"function\" &&\n          !paramInfo.applicable(query, configWrapper)\n        ) {\n          return null;\n        }\n\n        const label = coreUtils.query.getQueryParamProperty(\n          paramInfo,\n          \"label\",\n          query\n        );\n        const icon = coreUtils.query.getQueryParamProperty(\n          paramInfo,\n          \"icon\",\n          query\n        );\n\n        // Create the UI component based on the selector type\n        switch (paramInfo.selector) {\n          case \"DROPDOWN\":\n            return (\n              <DropdownSelector\n                key={paramInfo.name}\n                label={label}\n                name={paramInfo.name}\n                onChange={handleChange}\n                options={coreUtils.query.getQueryParamProperty(\n                  paramInfo,\n                  \"options\",\n                  query\n                )}\n                value={query[paramInfo.name] || paramInfo.default}\n              />\n            );\n          case \"CHECKBOX\":\n            return (\n              <CheckboxSelector\n                key={paramInfo.label}\n                label={\n                  <>\n                    {icon}\n                    {label}\n                  </>\n                }\n                name={paramInfo.name}\n                onChange={handleChange}\n                value={query[paramInfo.name]}\n              />\n            );\n          default:\n            return null;\n        }\n      })}\n    </S.GeneralSettingsPanel>\n  );\n}\n"],"file":"index.js"}