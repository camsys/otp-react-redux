{"version":3,"sources":["../../src/TripOptions/FeaturedOptionOverlay.tsx"],"names":["FeaturedOptionOverlay","featuredOption","setFeaturedOption","showBackButton","supportedModes","CompanyIcon","DetailedModeIcon","category","categories","find","c","mode","defaultImageRender","o","image","label","description","options","map","company","url","height","width","marginLeft"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;;;;;AAEA,MAAMA,qBAAqB,GAAG,CAAC;AAC7BC,EAAAA,cAD6B;AAE7BC,EAAAA,iBAF6B;AAG7BC,EAAAA,cAH6B;AAI7BC,EAAAA,cAJ6B;AAK7BC,EAAAA,WAL6B;AAM7BC,EAAAA;AAN6B,CAAD,KAeX;AACjB;AACA,QAAMC,QAAQ,GAAGH,cAAc,CAACI,UAAf,CAA0BC,IAA1B,CACfC,CAAC,IACC;AACAT,EAAAA,cAAc,KACd,4BAAiBS,CAAjB,EAAoBD,IAApB,CAAyBE,IAAI,IAAIV,cAAc,KAAKU,IAApD,CAJa,CAAjB;;AAOA,QAAMC,kBAAkB,GAAGC,CAAC,IAC1BA,CAAC,CAACC,KAAF,gBAAU;AAAK,IAAA,GAAG,EAAED,CAAC,CAACC,KAAZ;AAAmB,IAAA,GAAG,EAAED,CAAC,CAACE;AAA1B,IAAV,GAAgDF,CAAC,CAACE,KADpD;;AAGA,sBACE,6BAAC,CAAD,CAAG,gBAAH,QACGZ,cAAc,iBACb;AAAQ,IAAA,OAAO,EAAE,MAAMD,iBAAiB,CAAC,IAAD,CAAxC;AAAgD,IAAA,IAAI,EAAC;AAArD,YAFJ,eAME,6BAAC,CAAD,CAAG,0BAAH,QACII,gBAAgB,iBAChB,6BAAC,gBAAD;AAAkB,IAAA,IAAI,EAAE,kCAAuBC,QAAvB;AAAxB,IADD,iBAEK,6BAAC,CAAD,CAAG,cAAH;AAAkB,IAAA,GAAG,EAAEA,QAAQ,CAACO;AAAhC,IAHR,CANF,eAWE,6BAAC,CAAD,CAAG,aAAH,QAAkBP,QAAQ,CAACQ,KAA3B,CAXF,eAYE,wCAAIR,QAAQ,CAACS,WAAb,CAZF,eAaE,6BAAC,CAAD,CAAG,cAAH,QACGT,QAAQ,CAACU,OAAT,CAAiBC,GAAjB,CAAqBL,CAAC,IAAI;AACzB;AACA,QAAI,CAACA,CAAC,CAACM,OAAP,EAAgB,OAAO,IAAP;AAChB,wBACE;AAAI,MAAA,GAAG,EAAEN,CAAC,CAACE;AAAX,oBACE;AAAG,MAAA,IAAI,EAAEF,CAAC,CAACO;AAAX,oBACE;AAAM,MAAA,SAAS,EAAC;AAAhB,OACIf,WAAW,iBAAI,6BAAC,WAAD;AAAa,MAAA,OAAO,EAAEQ,CAAC,CAACM;AAAxB,MAAhB,IACCP,kBAAkB,CAACC,CAAD,CAFtB,CADF,eAKE;AAAM,MAAA,SAAS,EAAC;AAAhB,gCAEE,6BAAC,gCAAD;AACE,MAAA,KAAK,EAAE;AAAEQ,QAAAA,MAAM,EAAE,KAAV;AAAiBC,QAAAA,KAAK,EAAE,KAAxB;AAA+BC,QAAAA,UAAU,EAAE;AAA3C;AADT,MAFF,CALF,CADF,CADF;AAgBD,GAnBA,CADH,CAbF,CADF;AAsCD,CAjED;;eAmEevB,qB","sourcesContent":["import { ExternalLinkAlt } from \"@styled-icons/fa-solid/ExternalLinkAlt\";\nimport React, { FunctionComponent } from \"react\";\n\nimport * as S from \"./styled\";\nimport { Company, Modes } from \"./types\";\nimport { getCategoryModes, getCategoryPrimaryMode } from \"./util\";\n\nconst FeaturedOptionOverlay = ({\n  featuredOption,\n  setFeaturedOption,\n  showBackButton,\n  supportedModes,\n  CompanyIcon,\n  DetailedModeIcon\n}: {\n  featuredOption: string;\n  setFeaturedOption(option: string): void;\n  showBackButton?: boolean;\n  supportedCompanies: Company[];\n  supportedModes: Modes;\n  CompanyIcon?: FunctionComponent<{ company: string }>;\n  DetailedModeIcon?: FunctionComponent<{ mode: string }>;\n}): JSX.Element => {\n  // Find the mode that matches the selected category\n  const category = supportedModes.categories.find(\n    c =>\n      // Each supported mode may have \"sub-modes\". We need to identify the correct one to match the category correctly\n      featuredOption ===\n      getCategoryModes(c).find(mode => featuredOption === mode)\n  );\n\n  const defaultImageRender = o =>\n    o.image ? <img src={o.image} alt={o.label} /> : o.label;\n\n  return (\n    <S.OverlayContainer>\n      {showBackButton && (\n        <button onClick={() => setFeaturedOption(null)} type=\"button\">\n          Back\n        </button>\n      )}\n      <S.FeaturedOptionImageWrapper>\n        {(DetailedModeIcon && (\n          <DetailedModeIcon mode={getCategoryPrimaryMode(category)} />\n        )) || <S.MaxHeightImage src={category.image} />}\n      </S.FeaturedOptionImageWrapper>\n      <S.OverlayHeader>{category.label}</S.OverlayHeader>\n      <p>{category.description}</p>\n      <S.OverlayOptions>\n        {category.options.map(o => {\n          // Don't show non-company options (e.g., park and ride)\n          if (!o.company) return null;\n          return (\n            <li key={o.label}>\n              <a href={o.url}>\n                <span className=\"label\">\n                  {(CompanyIcon && <CompanyIcon company={o.company} />) ||\n                    defaultImageRender(o)}\n                </span>\n                <span className=\"open-link\">\n                  Open app\n                  <ExternalLinkAlt\n                    style={{ height: \"1em\", width: \"1em\", marginLeft: \"1ch\" }}\n                  />\n                </span>\n              </a>\n            </li>\n          );\n        })}\n      </S.OverlayOptions>\n    </S.OverlayContainer>\n  );\n};\n\nexport default FeaturedOptionOverlay;\n"],"file":"FeaturedOptionOverlay.js"}