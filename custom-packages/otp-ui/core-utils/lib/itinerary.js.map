{"version":3,"sources":["../src/itinerary.js"],"names":["transitModes","getTransitModes","config","modes","map","tm","mode","isTransit","includes","isReservationRequired","leg","boardRule","isContinuousDropoff","alightRule","isFlex","isAdvanceBookingRequired","info","latestBookingTime","daysPrior","legDropoffRequiresAdvanceBooking","dropOffBookingInfo","isWalk","isBicycle","isBicycleRent","isCar","startsWith","isMicromobility","isAccessMode","hasTransit","modesStr","split","some","hasCar","hasBike","hasMicromobility","hasHail","indexOf","hasRental","getMapColor","get","getStepDirection","step","relativeDirection","absoluteDirection","toLowerCase","getStepInstructions","conjunction","streetName","getStepStreetName","toSentenceCase","str","String","charAt","toUpperCase","substr","getCompanyFromLeg","from","rentedBike","rentedCar","rentedVehicle","tncData","networks","company","getLegModeLabel","hailedCar","routeLongName","getItineraryBounds","itinerary","coords","legs","forEach","legCoords","polyline","toGeoJSON","legGeometry","points","coordinates","c","getLegBounds","length","push","lat","lon","to","legLocationAtDistance","distance","line","pt","units","geometry","e","legElevationAtDistance","traversed","unshift","i","start","elevDistanceSpan","console","warn","pct","elevSpan","getElevationProfile","steps","unitConversion","minElev","maxElev","gain","loss","previous","elevation","elev","diff","second","first","convertedElevation","getTextWidth","text","font","canvas","document","createElement","context","getContext","metrics","measureText","width","getCompanyForNetwork","networkString","companies","find","co","id","getCompaniesLabelFromNetworks","network","filter","label","join","getModeForPlace","place","vertexType","getPlaceName","address","name","getTNCLocation","type","location","toFixed","calculatePhysicalActivity","walkDuration","bikeDuration","duration","caloriesBurned","getTransitFare","fareComponent","digits","transitFare","symbol","currencyCode","defaultFractionDigits","currency","cents","centsToString","dollars","dollarsToString","calculateFares","multiple","minTNCFare","maxTNCFare","tncCurrencyCode","maxCost","minCost","transitFares","fare","Object","keys","fareKey","regular","transitCurrencyCode","getTimeZoneOffset","dstOffset","Date","startTime","getTimezoneOffset","agencyTimeZoneOffset"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;AACO,MAAMA,YAAY,GAAG,CAC1B,MAD0B,EAE1B,KAF0B,EAG1B,QAH0B,EAI1B,OAJ0B,EAK1B,MAL0B,EAM1B,SAN0B,EAO1B,MAP0B,CAArB;AAUP;AACA;AACA;AACA;;;;AAEO,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AACtC,MAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,KAAnB,IAA4B,CAACD,MAAM,CAACC,KAAP,CAAaH,YAA9C,EACE,OAAOA,YAAP;AACF,SAAOE,MAAM,CAACC,KAAP,CAAaH,YAAb,CAA0BI,GAA1B,CAA8BC,EAAE,IAAIA,EAAE,CAACC,IAAvC,CAAP;AACD;;AAEM,SAASC,SAAT,CAAmBD,IAAnB,EAAyB;AAC9B,SAAON,YAAY,CAACQ,QAAb,CAAsBF,IAAtB,KAA+BA,IAAI,KAAK,SAA/C;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASG,qBAAT,CAA+BC,GAA/B,EAAoC;AACzC,SAAOA,GAAG,CAACC,SAAJ,KAAkB,WAAzB;AACD;AACD;AACA;AACA;AACA;AACA;;;AACO,SAASC,mBAAT,CAA6BF,GAA7B,EAAkC;AACvC,SAAOA,GAAG,CAACG,UAAJ,KAAmB,sBAA1B;AACD;AACD;AACA;AACA;AACA;;;AACO,SAASC,MAAT,CAAgBJ,GAAhB,EAAqB;AAC1B,SAAOD,qBAAqB,CAACC,GAAD,CAArB,IAA8BE,mBAAmB,CAACF,GAAD,CAAxD;AACD;;AAEM,SAASK,wBAAT,CAAkCC,IAAlC,EAAwC;AAAA;;AAC7C,SAAO,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,qCAAAA,IAAI,CAAEC,iBAAN,gFAAyBC,SAAzB,IAAqC,CAA5C;AACD;;AACM,SAASC,gCAAT,CAA0CT,GAA1C,EAA+C;AACpD,SAAOK,wBAAwB,CAACL,GAAG,CAACU,kBAAL,CAA/B;AACD;;AAEM,SAASC,MAAT,CAAgBf,IAAhB,EAAsB;AAC3B,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AAEX,SAAOA,IAAI,KAAK,MAAhB;AACD;;AAEM,SAASgB,SAAT,CAAmBhB,IAAnB,EAAyB;AAC9B,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AAEX,SAAOA,IAAI,KAAK,SAAhB;AACD;;AAEM,SAASiB,aAAT,CAAuBjB,IAAvB,EAA6B;AAClC,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AAEX,SAAOA,IAAI,KAAK,cAAhB;AACD;;AAEM,SAASkB,KAAT,CAAelB,IAAf,EAAqB;AAC1B,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AACX,SAAOA,IAAI,CAACmB,UAAL,CAAgB,KAAhB,CAAP;AACD;;AAEM,SAASC,eAAT,CAAyBpB,IAAzB,EAA+B;AACpC,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;AACX,SAAOA,IAAI,CAACmB,UAAL,CAAgB,eAAhB,CAAP;AACD;;AAEM,SAASE,YAAT,CAAsBrB,IAAtB,EAA4B;AACjC,SACEe,MAAM,CAACf,IAAD,CAAN,IACAgB,SAAS,CAAChB,IAAD,CADT,IAEAiB,aAAa,CAACjB,IAAD,CAFb,IAGAkB,KAAK,CAAClB,IAAD,CAHL,IAIAoB,eAAe,CAACpB,IAAD,CALjB;AAOD;AAED;AACA;AACA;AACA;;;AACO,SAASsB,UAAT,CAAoBC,QAApB,EAA8B;AACnC,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBzB,IAAI,IAAIC,SAAS,CAACD,IAAD,CAA1C,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAAS0B,MAAT,CAAgBH,QAAhB,EAA0B;AAC/B,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBzB,IAAI,IAAIkB,KAAK,CAAClB,IAAD,CAAtC,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAAS2B,OAAT,CAAiBJ,QAAjB,EAA2B;AAChC,SAAOA,QAAQ,CACZC,KADI,CACE,GADF,EAEJC,IAFI,CAECzB,IAAI,IAAIgB,SAAS,CAAChB,IAAD,CAAT,IAAmBiB,aAAa,CAACjB,IAAD,CAFzC,CAAP;AAGD;AAED;AACA;AACA;AACA;;;AACO,SAAS4B,gBAAT,CAA0BL,QAA1B,EAAoC;AACzC,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBzB,IAAI,IAAIoB,eAAe,CAACpB,IAAD,CAAhD,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAAS6B,OAAT,CAAiBN,QAAjB,EAA2B;AAChC,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBzB,IAAI,IAAIA,IAAI,CAAC8B,OAAL,CAAa,OAAb,IAAwB,CAAC,CAA1D,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASC,SAAT,CAAmBR,QAAnB,EAA6B;AAClC,SAAOA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,IAApB,CAAyBzB,IAAI,IAAIA,IAAI,CAAC8B,OAAL,CAAa,OAAb,IAAwB,CAAC,CAA1D,CAAP;AACD;;AAEM,SAASE,WAAT,CAAqBhC,IAArB,EAA2B;AAChCA,EAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKiC,GAAL,CAAS,MAAT,CAAf;AACA,MAAIjC,IAAI,KAAK,MAAb,EAAqB,OAAO,MAAP;AACrB,MAAIA,IAAI,KAAK,SAAb,EAAwB,OAAO,SAAP;AACxB,MAAIA,IAAI,KAAK,QAAb,EAAuB,OAAO,SAAP;AACvB,MAAIA,IAAI,KAAK,MAAb,EAAqB,OAAO,MAAP;AACrB,MAAIA,IAAI,KAAK,KAAb,EAAoB,OAAO,MAAP;AACpB,MAAIA,IAAI,KAAK,MAAb,EAAqB,OAAO,MAAP;AACrB,MAAIA,IAAI,KAAK,OAAb,EAAsB,OAAO,MAAP;AACtB,MAAIA,IAAI,KAAK,KAAb,EAAoB,OAAO,MAAP;AACpB,MAAIA,IAAI,KAAK,eAAb,EAA8B,OAAO,SAAP;AAC9B,SAAO,MAAP;AACD,C,CAED;;;AACO,SAASkC,gBAAT,CAA0BC,IAA1B,EAAgC;AACrC,UAAQA,IAAI,CAACC,iBAAb;AACE,SAAK,QAAL;AACE,aAAQ,QAAOD,IAAI,CAACE,iBAAL,CAAuBC,WAAvB,EAAqC,EAApD;;AACF,SAAK,MAAL;AACE,aAAO,MAAP;;AACF,SAAK,WAAL;AACE,aAAO,WAAP;;AACF,SAAK,eAAL;AACE,aAAO,aAAP;;AACF,SAAK,UAAL;AACE,aAAO,UAAP;;AACF,SAAK,gBAAL;AACE,aAAO,cAAP;;AACF,SAAK,OAAL;AACE,aAAO,OAAP;;AACF,SAAK,YAAL;AACE,aAAO,YAAP;;AACF,SAAK,kBAAL;AACE,aAAO,yBAAP;;AACF,SAAK,yBAAL;AACE,aAAO,gCAAP;;AACF,SAAK,UAAL;AACE,aAAO,eAAP;;AACF,SAAK,YAAL;AACE,aAAO,aAAP;;AACF,SAAK,aAAL;AACE,aAAO,cAAP;;AACF;AACE,aAAOH,IAAI,CAACC,iBAAZ;AA5BJ;AA8BD;;AAEM,SAASG,mBAAT,CAA6BJ,IAA7B,EAAmC;AACxC,QAAMK,WAAW,GAAGL,IAAI,CAACC,iBAAL,KAA2B,UAA3B,GAAwC,IAAxC,GAA+C,IAAnE;AACA,SAAQ,GAAEF,gBAAgB,CAACC,IAAD,CAAO,IAAGK,WAAY,IAAGL,IAAI,CAACM,UAAW,EAAnE;AACD;;AAEM,SAASC,iBAAT,CAA2BP,IAA3B,EAAiC;AACtC,MAAIA,IAAI,CAACM,UAAL,KAAoB,MAAxB,EAAgC,OAAO,cAAP;AAChC,MAAIN,IAAI,CAACM,UAAL,KAAoB,MAAxB,EAAgC,OAAO,cAAP;AAChC,SAAON,IAAI,CAACM,UAAZ;AACD;;AAEM,SAASE,cAAT,CAAwBC,GAAxB,EAA6B;AAClC,MAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,WAAO,EAAP;AACD;;AACDA,EAAAA,GAAG,GAAGC,MAAM,CAACD,GAAD,CAAZ;AACA,SAAOA,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BH,GAAG,CAACI,MAAJ,CAAW,CAAX,EAAcV,WAAd,EAArC;AACD;AAED;AACA;AACA;;;AACO,SAASW,iBAAT,CAA2B7C,GAA3B,EAAgC;AACrC,MAAI,CAACA,GAAL,EAAU,OAAO,IAAP;AACV,QAAM;AAAE8C,IAAAA,IAAF;AAAQlD,IAAAA,IAAR;AAAcmD,IAAAA,UAAd;AAA0BC,IAAAA,SAA1B;AAAqCC,IAAAA,aAArC;AAAoDC,IAAAA;AAApD,MAAgElD,GAAtE;;AACA,MAAIJ,IAAI,KAAK,KAAT,IAAkBoD,SAAtB,EAAiC;AAC/B,WAAOF,IAAI,CAACK,QAAL,CAAc,CAAd,CAAP;AACD;;AACD,MAAIvD,IAAI,KAAK,KAAT,IAAkBsD,OAAtB,EAA+B;AAC7B,WAAOA,OAAO,CAACE,OAAf;AACD;;AACD,MAAIxD,IAAI,KAAK,SAAT,IAAsBmD,UAAtB,IAAoCD,IAAI,CAACK,QAA7C,EAAuD;AACrD,WAAOL,IAAI,CAACK,QAAL,CAAc,CAAd,CAAP;AACD;;AACD,MAAIvD,IAAI,KAAK,eAAT,IAA4BqD,aAA5B,IAA6CH,IAAI,CAACK,QAAtD,EAAgE;AAC9D,WAAOL,IAAI,CAACK,QAAL,CAAc,CAAd,CAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAEM,SAASE,eAAT,CAAyBrD,GAAzB,EAA8B;AACnC,UAAQA,GAAG,CAACJ,IAAZ;AACE,SAAK,cAAL;AACE,aAAO,UAAP;;AACF,SAAK,KAAL;AACE,aAAOI,GAAG,CAACsD,SAAJ,GAAgB,MAAhB,GAAyB,OAAhC;;AACF,SAAK,SAAL;AACE,aAAO,aAAP;;AACF,SAAK,MAAL;AACE,UAAItD,GAAG,CAACuD,aAAJ,CAAkBrB,WAAlB,GAAgCR,OAAhC,CAAwC,WAAxC,MAAyD,CAAC,CAA9D,EACE,OAAO,WAAP;AACF,aAAO,YAAP;;AACF,SAAK,eAAL;AACE,aAAO,MAAP;;AACF;AACE,aAAOa,cAAc,CAACvC,GAAG,CAACJ,IAAL,CAArB;AAdJ;AAgBD;;AAEM,SAAS4D,kBAAT,CAA4BC,SAA5B,EAAuC;AAC5C,MAAIC,MAAM,GAAG,EAAb;AACAD,EAAAA,SAAS,CAACE,IAAV,CAAeC,OAAf,CAAuB5D,GAAG,IAAI;AAC5B,UAAM6D,SAAS,GAAGC,kBACfC,SADe,CACL/D,GAAG,CAACgE,WAAJ,CAAgBC,MADX,EAEfC,WAFe,CAEHxE,GAFG,CAECyE,CAAC,IAAI,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,CAFN,CAAlB;;AAGAT,IAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAY,GAAGG,SAAf,CAAT;AACD,GALD;AAMA,SAAOH,MAAP;AACD;AAED;AACA;AACA;;;AACO,SAASU,YAAT,CAAsBpE,GAAtB,EAA2B;AAChC,QAAM0D,MAAM,GAAGI,kBACZC,SADY,CACF/D,GAAG,CAACgE,WAAJ,CAAgBC,MADd,EAEZC,WAFY,CAEAxE,GAFA,CAEIyE,CAAC,IAAI,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,CAFT,CAAf,CADgC,CAKhC;AACA;AACA;;;AACA,MAAIT,MAAM,CAACW,MAAP,KAAkB,CAAtB,EAAyB;AACvBX,IAAAA,MAAM,CAACY,IAAP,CAAY,CAACtE,GAAG,CAAC8C,IAAJ,CAASyB,GAAV,EAAevE,GAAG,CAAC8C,IAAJ,CAAS0B,GAAxB,CAAZ,EAA0C,CAACxE,GAAG,CAACyE,EAAJ,CAAOF,GAAR,EAAavE,GAAG,CAACyE,EAAJ,CAAOD,GAApB,CAA1C;AACD;;AACD,SAAOd,MAAP;AACD;AAED;;;AAEO,SAASgB,qBAAT,CAA+B1E,GAA/B,EAAoC2E,QAApC,EAA8C;AACnD,MAAI,CAAC3E,GAAG,CAACgE,WAAT,EAAsB,OAAO,IAAP;;AAEtB,MAAI;AACF,UAAMY,IAAI,GAAGd,kBAASC,SAAT,CAAmB/D,GAAG,CAACgE,WAAJ,CAAgBC,MAAnC,CAAb;;AACA,UAAMY,EAAE,GAAG,oBAAUD,IAAV,EAAgBD,QAAhB,EAA0B;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAA1B,CAAX;;AACA,QAAID,EAAE,IAAIA,EAAE,CAACE,QAAT,IAAqBF,EAAE,CAACE,QAAH,CAAYb,WAArC,EAAkD;AAChD,aAAO,CAACW,EAAE,CAACE,QAAH,CAAYb,WAAZ,CAAwB,CAAxB,CAAD,EAA6BW,EAAE,CAACE,QAAH,CAAYb,WAAZ,CAAwB,CAAxB,CAA7B,CAAP;AACD;AACF,GAND,CAME,OAAOc,CAAP,EAAU,CACV;AACD;;AAED,SAAO,IAAP;AACD;AAED;;;AAEO,SAASC,sBAAT,CAAgChB,MAAhC,EAAwCU,QAAxC,EAAkD;AACvD;AACA,MAAIO,SAAS,GAAG,CAAhB,CAFuD,CAGvD;AACA;;AACA,MAAIjB,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAe,CAAnB,EAAsB;AACpBA,IAAAA,MAAM,CAACkB,OAAP,CAAe,CAAC,CAAD,EAAI,IAAJ,CAAf;AACD;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,MAAM,CAACI,MAA3B,EAAmCe,CAAC,EAApC,EAAwC;AACtC,UAAMC,KAAK,GAAGpB,MAAM,CAACmB,CAAC,GAAG,CAAL,CAApB;AACA,UAAME,gBAAgB,GAAGrB,MAAM,CAACmB,CAAD,CAAN,CAAU,CAAV,IAAeC,KAAK,CAAC,CAAD,CAA7C;;AACA,QAAIV,QAAQ,IAAIO,SAAZ,IAAyBP,QAAQ,IAAIO,SAAS,GAAGI,gBAArD,EAAuE;AACrE;AACA;AACA,UAAID,KAAK,CAAC,CAAD,CAAL,KAAa,IAAjB,EAAuB;AACrBE,QAAAA,OAAO,CAACC,IAAR,CACE,8CADF,EAEEb,QAFF,EAGEO,SAHF;AAKA,eAAO,IAAP;AACD;;AACD,YAAMO,GAAG,GAAG,CAACd,QAAQ,GAAGO,SAAZ,IAAyBI,gBAArC;AACA,YAAMI,QAAQ,GAAGzB,MAAM,CAACmB,CAAD,CAAN,CAAU,CAAV,IAAeC,KAAK,CAAC,CAAD,CAArC;AACA,aAAOA,KAAK,CAAC,CAAD,CAAL,GAAWK,QAAQ,GAAGD,GAA7B;AACD;;AACDP,IAAAA,SAAS,IAAII,gBAAb;AACD;;AACDC,EAAAA,OAAO,CAACC,IAAR,CACE,8CADF,EAEEb,QAFF,EAGEO,SAHF;AAKA,SAAO,IAAP;AACD,C,CAED;AACA;;;AACO,SAASS,mBAAT,CAA6BC,KAA7B,EAAoCC,cAAc,GAAG,CAArD,EAAwD;AAC7D,MAAIC,OAAO,GAAG,MAAd;AACA,MAAIC,OAAO,GAAG,CAAC,MAAf;AACA,MAAIb,SAAS,GAAG,CAAhB;AACA,MAAIc,IAAI,GAAG,CAAX;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,QAAMjC,MAAM,GAAG,EAAf;AACA2B,EAAAA,KAAK,CAAChC,OAAN,CAAc7B,IAAI,IAAI;AACpB,QAAI,CAACA,IAAI,CAACoE,SAAN,IAAmBpE,IAAI,CAACoE,SAAL,CAAe9B,MAAf,KAA0B,CAAjD,EAAoD;AAClDa,MAAAA,SAAS,IAAInD,IAAI,CAAC4C,QAAlB;AACA;AACD;;AACD,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrD,IAAI,CAACoE,SAAL,CAAe9B,MAAnC,EAA2Ce,CAAC,EAA5C,EAAgD;AAC9C,YAAMgB,IAAI,GAAGrE,IAAI,CAACoE,SAAL,CAAef,CAAf,CAAb;;AACA,UAAIc,QAAJ,EAAc;AACZ,cAAMG,IAAI,GAAG,CAACD,IAAI,CAACE,MAAL,GAAcJ,QAAQ,CAACI,MAAxB,IAAkCT,cAA/C;AACA,YAAIQ,IAAI,GAAG,CAAX,EAAcL,IAAI,IAAIK,IAAR,CAAd,KACKJ,IAAI,IAAII,IAAR;AACN;;AACD,UAAIjB,CAAC,KAAK,CAAN,IAAWgB,IAAI,CAACG,KAAL,KAAe,CAA9B,EAAiC,CAC/B;AACD;;AACD,YAAMC,kBAAkB,GAAGJ,IAAI,CAACE,MAAL,GAAcT,cAAzC;AACA,UAAIW,kBAAkB,GAAGV,OAAzB,EAAkCA,OAAO,GAAGU,kBAAV;AAClC,UAAIA,kBAAkB,GAAGT,OAAzB,EAAkCA,OAAO,GAAGS,kBAAV;AAClCvC,MAAAA,MAAM,CAACK,IAAP,CAAY,CAACY,SAAS,GAAGkB,IAAI,CAACG,KAAlB,EAAyBH,IAAI,CAACE,MAA9B,CAAZ,EAb8C,CAc9C;AACA;;AACA,UAAIlB,CAAC,KAAKrD,IAAI,CAACoE,SAAL,CAAe9B,MAAf,GAAwB,CAA9B,IAAmC+B,IAAI,CAACG,KAAL,KAAexE,IAAI,CAAC4C,QAA3D,EAAqE,CACnE;AACD;;AACDuB,MAAAA,QAAQ,GAAGE,IAAX;AACD;;AACDlB,IAAAA,SAAS,IAAInD,IAAI,CAAC4C,QAAlB;AACD,GA3BD;AA4BA,SAAO;AAAEoB,IAAAA,OAAF;AAAWD,IAAAA,OAAX;AAAoB7B,IAAAA,MAApB;AAA4BiB,IAAAA,SAA5B;AAAuCc,IAAAA,IAAvC;AAA6CC,IAAAA;AAA7C,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASQ,YAAT,CAAsBC,IAAtB,EAA4BC,IAAI,GAAG,YAAnC,EAAiD;AACtD;AACA,QAAMC,MAAM,GACVH,YAAY,CAACG,MAAb,KACCH,YAAY,CAACG,MAAb,GAAsBC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CADvB,CADF;AAGA,QAAMC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;AACAD,EAAAA,OAAO,CAACJ,IAAR,GAAeA,IAAf;AACA,QAAMM,OAAO,GAAGF,OAAO,CAACG,WAAR,CAAoBR,IAApB,CAAhB;AACA,SAAOO,OAAO,CAACE,KAAf;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BC,aAA9B,EAA6CC,SAAS,GAAG,EAAzD,EAA6D;AAC3D,QAAMlE,OAAO,GAAGkE,SAAS,CAACC,IAAV,CAAeC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUJ,aAA/B,CAAhB;;AACA,MAAI,CAACjE,OAAL,EAAc;AACZmC,IAAAA,OAAO,CAACC,IAAR,CACG,uEAAsE6B,aAAc,EADvF,EAEEC,SAFF;AAID;;AACD,SAAOlE,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASsE,6BAAT,CAAuCvE,QAAvC,EAAiDmE,SAAS,GAAG,EAA7D,EAAiE;AACtE,SAAOnE,QAAQ,CACZzD,GADI,CACAiI,OAAO,IAAIP,oBAAoB,CAACO,OAAD,EAAUL,SAAV,CAD/B,EAEJM,MAFI,CAEGJ,EAAE,IAAI,CAAC,CAACA,EAFX,EAGJ9H,GAHI,CAGA8H,EAAE,IAAIA,EAAE,CAACK,KAHT,EAIJC,IAJI,CAIC,GAJD,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,UAAQA,KAAK,CAACC,UAAd;AACE,SAAK,UAAL;AACE,aAAO,KAAP;;AACF,SAAK,eAAL;AACE,aAAO,WAAP;AACF;;AACA,SAAK,WAAL;AACA,SAAK,UAAL;AACE,aAAO,MAAP;AACF;;AACA;AACE,aAAO,SAAP;AAXJ;AAaD;;AAEM,SAASC,YAAT,CAAsBF,KAAtB,EAA6BV,SAA7B,EAAwC;AAC7C;AACA,MAAIU,KAAK,CAACG,OAAV,EAAmB,OAAOH,KAAK,CAACG,OAAN,CAAc/G,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAP;;AACnB,MAAI4G,KAAK,CAAC7E,QAAN,IAAkB6E,KAAK,CAACC,UAAN,KAAqB,eAA3C,EAA4D;AAC1D;AACA;AACA;AACA;AACA,UAAM7E,OAAO,GAAGgE,oBAAoB,CAACY,KAAK,CAAC7E,QAAN,CAAe,CAAf,CAAD,EAAoBmE,SAApB,CAApC;;AACA,QAAIlE,OAAJ,EAAa;AACX,aAAQ,GAAEA,OAAO,CAACyE,KAAM,IAAGE,eAAe,CAACC,KAAD,CAAQ,EAAlD;AACD;AACF,GAZ4C,CAa7C;;;AACA,SAAOA,KAAK,CAACI,IAAb;AACD;;AAEM,SAASC,cAAT,CAAwBrI,GAAxB,EAA6BsI,IAA7B,EAAmC;AACxC,QAAMC,QAAQ,GAAGvI,GAAG,CAACsI,IAAD,CAApB;AACA,SAAQ,GAAEC,QAAQ,CAAChE,GAAT,CAAaiE,OAAb,CAAqB,CAArB,CAAwB,IAAGD,QAAQ,CAAC/D,GAAT,CAAagE,OAAb,CAAqB,CAArB,CAAwB,EAA7D;AACD;;AAEM,SAASC,yBAAT,CAAmChF,SAAnC,EAA8C;AACnD,MAAIiF,YAAY,GAAG,CAAnB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACAlF,EAAAA,SAAS,CAACE,IAAV,CAAeC,OAAf,CAAuB5D,GAAG,IAAI;AAC5B,QAAIA,GAAG,CAACJ,IAAJ,CAASmB,UAAT,CAAoB,MAApB,CAAJ,EAAiC2H,YAAY,IAAI1I,GAAG,CAAC4I,QAApB;AACjC,QAAI5I,GAAG,CAACJ,IAAJ,CAASmB,UAAT,CAAoB,SAApB,CAAJ,EAAoC4H,YAAY,IAAI3I,GAAG,CAAC4I,QAApB;AACrC,GAHD;AAIA,QAAMC,cAAc,GACjBH,YAAY,GAAG,IAAhB,GAAwB,GAAxB,GAA+BC,YAAY,GAAG,IAAhB,GAAwB,GADxD;AAEA,SAAO;AACLA,IAAAA,YADK;AAELE,IAAAA,cAFK;AAGLH,IAAAA;AAHK,GAAP;AAKD;AAED;AACA;AACA;AACA;;;AACO,SAASI,cAAT,CAAwBC,aAAxB,EAAuC;AAC5C;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,MAAM,GAAG,GAAb;AACA,MAAIC,YAAY,GAAG,KAAnB;;AACA,MAAIJ,aAAJ,EAAmB;AACjB;AACA,KAAC;AACCI,MAAAA,YADD;AAECC,MAAAA,qBAAqB,EAAEJ,MAFxB;AAGCE,MAAAA;AAHD,QAIGH,aAAa,CAACM,QAJlB;AAKAJ,IAAAA,WAAW,GAAGF,aAAa,CAACO,KAA5B;AACD,GAd2C,CAe5C;;;AACA,QAAMC,aAAa,GAAGD,KAAK,IAAI;AAC7B,UAAME,OAAO,GAAG,CAACF,KAAK,GAAG,MAAMN,MAAf,EAAuBR,OAAvB,CAA+BQ,MAA/B,CAAhB;AACA,WAAQ,GAAEE,MAAO,GAAEM,OAAQ,EAA3B;AACD,GAHD,CAhB4C,CAoB5C;;;AACA,QAAMC,eAAe,GAAGD,OAAO,IAAK,GAAEN,MAAO,GAAEM,OAAO,CAAChB,OAAR,CAAgB,CAAhB,CAAmB,EAAlE;;AACA,SAAO;AACLe,IAAAA,aADK;AAELJ,IAAAA,YAFK;AAGLM,IAAAA,eAHK;AAILR,IAAAA;AAJK,GAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASS,cAAT,CAAwBjG,SAAxB,EAAmCkG,QAAQ,GAAG,KAA9C,EAAqD;AAC1D;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,eAAJ;AACArG,EAAAA,SAAS,CAACE,IAAV,CAAeC,OAAf,CAAuB5D,GAAG,IAAI;AAC5B,QAAIA,GAAG,CAACJ,IAAJ,KAAa,KAAb,IAAsBI,GAAG,CAACsD,SAA1B,IAAuCtD,GAAG,CAACkD,OAA/C,EAAwD;AACtD,YAAM;AAAEmG,QAAAA,QAAF;AAAYU,QAAAA,OAAZ;AAAqBC,QAAAA;AAArB,UAAiChK,GAAG,CAACkD,OAA3C,CADsD,CAEtD;;AACA0G,MAAAA,UAAU,IAAII,OAAd;AACAH,MAAAA,UAAU,IAAIE,OAAd;AACAD,MAAAA,eAAe,GAAGT,QAAlB;AACD;AACF,GARD;;AAUA,MAAIM,QAAJ,EAAc;AACZ;AACA,UAAMM,YAAY,GAAG,EAArB;;AACA,QAAIxG,SAAS,IAAIA,SAAS,CAACyG,IAAvB,IAA+BzG,SAAS,CAACyG,IAAV,CAAeA,IAAlD,EAAwD;AACtDC,MAAAA,MAAM,CAACC,IAAP,CAAY3G,SAAS,CAACyG,IAAV,CAAeA,IAA3B,EAAiCtG,OAAjC,CAAyCyG,OAAO,IAAI;AAClD,cAAMtB,aAAa,GAAGtF,SAAS,CAACyG,IAAV,CAAeA,IAAf,CAAoBG,OAApB,CAAtB;AACAJ,QAAAA,YAAY,CAACI,OAAD,CAAZ,GAAwBvB,cAAc,CAACC,aAAD,CAAtC;AACD,OAHD;AAID;;AAED,WAAO;AACLc,MAAAA,UADK;AAELD,MAAAA,UAFK;AAGLE,MAAAA,eAHK;AAILG,MAAAA;AAJK,KAAP;AAMD,GA/ByD,CAiC1D;;;AACA,QAAMlB,aAAa,GACjBtF,SAAS,CAACyG,IAAV,IAAkBzG,SAAS,CAACyG,IAAV,CAAeA,IAAjC,IAAyCzG,SAAS,CAACyG,IAAV,CAAeA,IAAf,CAAoBI,OAD/D,CAlC0D,CAoC1D;;AACA,QAAM;AACJf,IAAAA,aADI;AAEJJ,IAAAA,YAAY,EAAEoB,mBAFV;AAGJd,IAAAA,eAHI;AAIJR,IAAAA;AAJI,MAKFH,cAAc,CAACC,aAAD,CALlB;AAOA,SAAO;AACLQ,IAAAA,aADK;AAELJ,IAAAA,YAAY,EAAEoB,mBAAmB,IAAIT,eAFhC;AAGLL,IAAAA,eAHK;AAILI,IAAAA,UAJK;AAKLD,IAAAA,UALK;AAMLX,IAAAA;AANK,GAAP;AAQD;;AAEM,SAASuB,iBAAT,CAA2B/G,SAA3B,EAAsC;AAC3C,MAAI,CAACA,SAAS,CAACE,IAAX,IAAmB,CAACF,SAAS,CAACE,IAAV,CAAeU,MAAvC,EAA+C,OAAO,CAAP,CADJ,CAG3C;;AACA,QAAMoG,SAAS,GACb,IAAIC,IAAJ,CAASjH,SAAS,CAACkH,SAAnB,EAA8BC,iBAA9B,KACA,IAAIF,IAAJ,GAAWE,iBAAX,EAFF;AAIA,SACEnH,SAAS,CAACE,IAAV,CAAe,CAAf,EAAkBkH,oBAAlB,GACA,CAAC,IAAIH,IAAJ,GAAWE,iBAAX,KAAiCH,SAAlC,IAA+C,KAFjD;AAID","sourcesContent":["import polyline from \"@mapbox/polyline\";\nimport turfAlong from \"@turf/along\";\n\n// All OTP transit modes\nexport const transitModes = [\n  \"TRAM\",\n  \"BUS\",\n  \"SUBWAY\",\n  \"FERRY\",\n  \"RAIL\",\n  \"GONDOLA\",\n  \"FLEX\"\n];\n\n/**\n * @param  {config} config OTP-RR configuration object\n * @return {Array}  List of all transit modes defined in config; otherwise default mode list\n */\n\nexport function getTransitModes(config) {\n  if (!config || !config.modes || !config.modes.transitModes)\n    return transitModes;\n  return config.modes.transitModes.map(tm => tm.mode);\n}\n\nexport function isTransit(mode) {\n  return transitModes.includes(mode) || mode === \"TRANSIT\";\n}\n\n/**\n * Returns true if the leg pickup rules enabled which require\n * calling ahead for the service to run. \"mustPhone\" is the only\n * property of boardRule which encodes this info.\n */\nexport function isReservationRequired(leg) {\n  return leg.boardRule === \"mustPhone\";\n}\n/**\n * Returns true if the leg has continuous dropoff enabled which requires\n * asking the driver to let the user off. \"coordinateWithDriver\" is the only\n * property of alightRule which encodes this info.\n */\nexport function isContinuousDropoff(leg) {\n  return leg.alightRule === \"coordinateWithDriver\";\n}\n/**\n * The two rules checked by the above two functions are the only values\n * returned by OTP when a leg is a flex leg.\n */\nexport function isFlex(leg) {\n  return isReservationRequired(leg) || isContinuousDropoff(leg);\n}\n\nexport function isAdvanceBookingRequired(info) {\n  return info?.latestBookingTime?.daysPrior > 0;\n}\nexport function legDropoffRequiresAdvanceBooking(leg) {\n  return isAdvanceBookingRequired(leg.dropOffBookingInfo);\n}\n\nexport function isWalk(mode) {\n  if (!mode) return false;\n\n  return mode === \"WALK\";\n}\n\nexport function isBicycle(mode) {\n  if (!mode) return false;\n\n  return mode === \"BICYCLE\";\n}\n\nexport function isBicycleRent(mode) {\n  if (!mode) return false;\n\n  return mode === \"BICYCLE_RENT\";\n}\n\nexport function isCar(mode) {\n  if (!mode) return false;\n  return mode.startsWith(\"CAR\");\n}\n\nexport function isMicromobility(mode) {\n  if (!mode) return false;\n  return mode.startsWith(\"MICROMOBILITY\");\n}\n\nexport function isAccessMode(mode) {\n  return (\n    isWalk(mode) ||\n    isBicycle(mode) ||\n    isBicycleRent(mode) ||\n    isCar(mode) ||\n    isMicromobility(mode)\n  );\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are transit modes\n */\nexport function hasTransit(modesStr) {\n  return modesStr.split(\",\").some(mode => isTransit(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\nexport function hasCar(modesStr) {\n  return modesStr.split(\",\").some(mode => isCar(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are bicycle-based modes\n */\nexport function hasBike(modesStr) {\n  return modesStr\n    .split(\",\")\n    .some(mode => isBicycle(mode) || isBicycleRent(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are micromobility-based modes\n */\nexport function hasMicromobility(modesStr) {\n  return modesStr.split(\",\").some(mode => isMicromobility(mode));\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a hailing mode\n */\nexport function hasHail(modesStr) {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_HAIL\") > -1);\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a rental mode\n */\nexport function hasRental(modesStr) {\n  return modesStr.split(\",\").some(mode => mode.indexOf(\"_RENT\") > -1);\n}\n\nexport function getMapColor(mode) {\n  mode = mode || this.get(\"mode\");\n  if (mode === \"WALK\") return \"#444\";\n  if (mode === \"BICYCLE\") return \"#0073e5\";\n  if (mode === \"SUBWAY\") return \"#e60000\";\n  if (mode === \"RAIL\") return \"#b00\";\n  if (mode === \"BUS\") return \"#080\";\n  if (mode === \"TRAM\") return \"#800\";\n  if (mode === \"FERRY\") return \"#008\";\n  if (mode === \"CAR\") return \"#444\";\n  if (mode === \"MICROMOBILITY\") return \"#f5a729\";\n  return \"#aaa\";\n}\n\n// TODO: temporary code; handle via migrated OTP i18n language table\nexport function getStepDirection(step) {\n  switch (step.relativeDirection) {\n    case \"DEPART\":\n      return `Head ${step.absoluteDirection.toLowerCase()}`;\n    case \"LEFT\":\n      return \"Left\";\n    case \"HARD_LEFT\":\n      return \"Hard left\";\n    case \"SLIGHTLY_LEFT\":\n      return \"Slight left\";\n    case \"CONTINUE\":\n      return \"Continue\";\n    case \"SLIGHTLY_RIGHT\":\n      return \"Slight right\";\n    case \"RIGHT\":\n      return \"Right\";\n    case \"HARD_RIGHT\":\n      return \"Hard right\";\n    case \"CIRCLE_CLOCKWISE\":\n      return \"Follow circle clockwise\";\n    case \"CIRCLE_COUNTERCLOCKWISE\":\n      return \"Follow circle counterclockwise\";\n    case \"ELEVATOR\":\n      return \"Take elevator\";\n    case \"UTURN_LEFT\":\n      return \"Left U-turn\";\n    case \"UTURN_RIGHT\":\n      return \"Right U-turn\";\n    default:\n      return step.relativeDirection;\n  }\n}\n\nexport function getStepInstructions(step) {\n  const conjunction = step.relativeDirection === \"ELEVATOR\" ? \"to\" : \"on\";\n  return `${getStepDirection(step)} ${conjunction} ${step.streetName}`;\n}\n\nexport function getStepStreetName(step) {\n  if (step.streetName === \"road\") return \"Unnamed Road\";\n  if (step.streetName === \"path\") return \"Unnamed Path\";\n  return step.streetName;\n}\n\nexport function toSentenceCase(str) {\n  if (str == null) {\n    return \"\";\n  }\n  str = String(str);\n  return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();\n}\n\n/**\n * Derive the company string based on mode and network associated with leg.\n */\nexport function getCompanyFromLeg(leg) {\n  if (!leg) return null;\n  const { from, mode, rentedBike, rentedCar, rentedVehicle, tncData } = leg;\n  if (mode === \"CAR\" && rentedCar) {\n    return from.networks[0];\n  }\n  if (mode === \"CAR\" && tncData) {\n    return tncData.company;\n  }\n  if (mode === \"BICYCLE\" && rentedBike && from.networks) {\n    return from.networks[0];\n  }\n  if (mode === \"MICROMOBILITY\" && rentedVehicle && from.networks) {\n    return from.networks[0];\n  }\n  return null;\n}\n\nexport function getLegModeLabel(leg) {\n  switch (leg.mode) {\n    case \"BICYCLE_RENT\":\n      return \"Biketown\";\n    case \"CAR\":\n      return leg.hailedCar ? \"Ride\" : \"Drive\";\n    case \"GONDOLA\":\n      return \"Aerial Tram\";\n    case \"TRAM\":\n      if (leg.routeLongName.toLowerCase().indexOf(\"streetcar\") !== -1)\n        return \"Streetcar\";\n      return \"Light Rail\";\n    case \"MICROMOBILITY\":\n      return \"Ride\";\n    default:\n      return toSentenceCase(leg.mode);\n  }\n}\n\nexport function getItineraryBounds(itinerary) {\n  let coords = [];\n  itinerary.legs.forEach(leg => {\n    const legCoords = polyline\n      .toGeoJSON(leg.legGeometry.points)\n      .coordinates.map(c => [c[1], c[0]]);\n    coords = [...coords, ...legCoords];\n  });\n  return coords;\n}\n\n/**\n * Return a coords object that encloses the given leg's geometry.\n */\nexport function getLegBounds(leg) {\n  const coords = polyline\n    .toGeoJSON(leg.legGeometry.points)\n    .coordinates.map(c => [c[1], c[0]]);\n\n  // in certain cases, there might be zero-length coordinates in the leg\n  // geometry. In these cases, build us an array of coordinates using the from\n  // and to data of the leg.\n  if (coords.length === 0) {\n    coords.push([leg.from.lat, leg.from.lon], [leg.to.lat, leg.to.lon]);\n  }\n  return coords;\n}\n\n/* Returns an interpolated lat-lon at a specified distance along a leg */\n\nexport function legLocationAtDistance(leg, distance) {\n  if (!leg.legGeometry) return null;\n\n  try {\n    const line = polyline.toGeoJSON(leg.legGeometry.points);\n    const pt = turfAlong(line, distance, { units: \"meters\" });\n    if (pt && pt.geometry && pt.geometry.coordinates) {\n      return [pt.geometry.coordinates[1], pt.geometry.coordinates[0]];\n    }\n  } catch (e) {\n    // FIXME handle error!\n  }\n\n  return null;\n}\n\n/* Returns an interpolated elevation at a specified distance along a leg */\n\nexport function legElevationAtDistance(points, distance) {\n  // Iterate through the combined elevation profile\n  let traversed = 0;\n  // If first point distance is not zero, insert starting point at zero with\n  // null elevation. Encountering this value should trigger the warning below.\n  if (points[0][0] > 0) {\n    points.unshift([0, null]);\n  }\n  for (let i = 1; i < points.length; i++) {\n    const start = points[i - 1];\n    const elevDistanceSpan = points[i][0] - start[0];\n    if (distance >= traversed && distance <= traversed + elevDistanceSpan) {\n      // Distance falls within this point and the previous one;\n      // compute & return iterpolated elevation value\n      if (start[1] === null) {\n        console.warn(\n          \"Elevation value does not exist for distance.\",\n          distance,\n          traversed\n        );\n        return null;\n      }\n      const pct = (distance - traversed) / elevDistanceSpan;\n      const elevSpan = points[i][1] - start[1];\n      return start[1] + elevSpan * pct;\n    }\n    traversed += elevDistanceSpan;\n  }\n  console.warn(\n    \"Elevation value does not exist for distance.\",\n    distance,\n    traversed\n  );\n  return null;\n}\n\n// Iterate through the steps, building the array of elevation points and\n// keeping track of the minimum and maximum elevations reached\nexport function getElevationProfile(steps, unitConversion = 1) {\n  let minElev = 100000;\n  let maxElev = -100000;\n  let traversed = 0;\n  let gain = 0;\n  let loss = 0;\n  let previous = null;\n  const points = [];\n  steps.forEach(step => {\n    if (!step.elevation || step.elevation.length === 0) {\n      traversed += step.distance;\n      return;\n    }\n    for (let i = 0; i < step.elevation.length; i++) {\n      const elev = step.elevation[i];\n      if (previous) {\n        const diff = (elev.second - previous.second) * unitConversion;\n        if (diff > 0) gain += diff;\n        else loss += diff;\n      }\n      if (i === 0 && elev.first !== 0) {\n        // console.warn(`No elevation data available for step ${stepIndex}-${i} at beginning of segment`, elev)\n      }\n      const convertedElevation = elev.second * unitConversion;\n      if (convertedElevation < minElev) minElev = convertedElevation;\n      if (convertedElevation > maxElev) maxElev = convertedElevation;\n      points.push([traversed + elev.first, elev.second]);\n      // Insert \"filler\" point if the last point in elevation profile does not\n      // reach the full distance of the step.\n      if (i === step.elevation.length - 1 && elev.first !== step.distance) {\n        // points.push([traversed + step.distance, elev.second])\n      }\n      previous = elev;\n    }\n    traversed += step.distance;\n  });\n  return { maxElev, minElev, points, traversed, gain, loss };\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {string} text The text to be rendered.\n * @param {string} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nexport function getTextWidth(text, font = \"22px Arial\") {\n  // re-use canvas object for better performance\n  const canvas =\n    getTextWidth.canvas ||\n    (getTextWidth.canvas = document.createElement(\"canvas\"));\n  const context = canvas.getContext(\"2d\");\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n}\n\n/**\n * Get the configured company object for the given network string if the company\n * has been defined in the provided companies array config.\n */\nfunction getCompanyForNetwork(networkString, companies = []) {\n  const company = companies.find(co => co.id === networkString);\n  if (!company) {\n    console.warn(\n      `No company found in config.yml that matches rented vehicle network: ${networkString}`,\n      companies\n    );\n  }\n  return company;\n}\n\n/**\n * Get a string label to display from a list of vehicle rental networks.\n *\n * @param  {Array<string>} networks  A list of network ids.\n * @param  {Array<object>}  [companies=[]] An optional list of the companies config.\n * @return {string}  A label for use in presentation on a website.\n */\nexport function getCompaniesLabelFromNetworks(networks, companies = []) {\n  return networks\n    .map(network => getCompanyForNetwork(network, companies))\n    .filter(co => !!co)\n    .map(co => co.label)\n    .join(\"/\");\n}\n\n/**\n * Returns mode name by checking the vertex type (VertexType class in OTP) for\n * the provided place. NOTE: this is currently only intended for vehicles at\n * the moment (not transit or walking).\n *\n * TODO: I18N\n * @param  {string} place place from itinerary leg\n */\nexport function getModeForPlace(place) {\n  switch (place.vertexType) {\n    case \"CARSHARE\":\n      return \"car\";\n    case \"VEHICLERENTAL\":\n      return \"E-scooter\";\n    // TODO: Should the type change depending on bike vertex type?\n    case \"BIKESHARE\":\n    case \"BIKEPARK\":\n      return \"bike\";\n    // If company offers more than one mode, default to `vehicle` string.\n    default:\n      return \"vehicle\";\n  }\n}\n\nexport function getPlaceName(place, companies) {\n  // If address is provided (i.e. for carshare station, use it)\n  if (place.address) return place.address.split(\",\")[0];\n  if (place.networks && place.vertexType === \"VEHICLERENTAL\") {\n    // For vehicle rental pick up, do not use the place name. Rather, use\n    // company name + vehicle type (e.g., SPIN E-scooter). Place name is often just\n    // a UUID that has no relevance to the actual vehicle. For bikeshare, however,\n    // there are often hubs or bikes that have relevant names to the user.\n    const company = getCompanyForNetwork(place.networks[0], companies);\n    if (company) {\n      return `${company.label} ${getModeForPlace(place)}`;\n    }\n  }\n  // Default to place name\n  return place.name;\n}\n\nexport function getTNCLocation(leg, type) {\n  const location = leg[type];\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`;\n}\n\nexport function calculatePhysicalActivity(itinerary) {\n  let walkDuration = 0;\n  let bikeDuration = 0;\n  itinerary.legs.forEach(leg => {\n    if (leg.mode.startsWith(\"WALK\")) walkDuration += leg.duration;\n    if (leg.mode.startsWith(\"BICYCLE\")) bikeDuration += leg.duration;\n  });\n  const caloriesBurned =\n    (walkDuration / 3600) * 280 + (bikeDuration / 3600) * 290;\n  return {\n    bikeDuration,\n    caloriesBurned,\n    walkDuration\n  };\n}\n\n/**\n * For a given fare component (either total fare or component parts), returns\n * an object with string formatters and the fare value (in cents).\n */\nexport function getTransitFare(fareComponent) {\n  // Default values (if fare component is not valid).\n  let digits = 2;\n  let transitFare = 0;\n  let symbol = \"$\";\n  let currencyCode = \"USD\";\n  if (fareComponent) {\n    // Assign values without declaration. See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#assignment_without_declaration\n    ({\n      currencyCode,\n      defaultFractionDigits: digits,\n      symbol\n    } = fareComponent.currency);\n    transitFare = fareComponent.cents;\n  }\n  // For cents to string conversion, use digits from fare component.\n  const centsToString = cents => {\n    const dollars = (cents / 10 ** digits).toFixed(digits);\n    return `${symbol}${dollars}`;\n  };\n  // For dollars to string conversion, assume we're rounding to two digits.\n  const dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`;\n  return {\n    centsToString,\n    currencyCode,\n    dollarsToString,\n    transitFare\n  };\n}\n\n/**\n * For an itinerary, calculates the transit/TNC fares and returns an object with\n * these values, currency info, as well as string formatters.\n * It is assumed that the same currency is used for transit and TNC legs.\n *\n * multiple being set to true will change the output behavior:\n * - dollarsToString and centsToString will be returned as part of each fare\n * - currencyCode will be returned separately for each fare\n * - tnc currency code will be returned separately\n * - each fare type will be returned separately within a new transitFares property\n *\n * FIXME: a new approach to fare calculation must be found:\n * the current approach is not sustainable, as centsToString and DollarsToString\n * must be replaced by i18n anyway.\n *\n * However, the current behavior should ideally be kept to avoid a breaking change.\n * The \"multiple\" mode is helpful, but only prevents tnc fare calculation from being duplicated.\n * This method could be split out into a new one, along with tnc fare calculation.\n * If this is done, the individual fare calculation should also be modified to support\n * a default fare not being called \"regular\". However, this again would be a breaking change.\n * This breaking change is avoided by adding the \"multiple\" parameter.\n *\n * When centsToString and dollarsToString are removed, this method should be split into\n * individual fare calculation on a variable fare key, fare calculation of an entire leg,\n * which will get fares for every fare key in the leg, and a method to calculate the fare of\n * a tnc ride within the leg. This will make typescripting easier, as the types will be cleaner.\n */\nexport function calculateFares(itinerary, multiple = false) {\n  // Process any TNC fares\n  let minTNCFare = 0;\n  let maxTNCFare = 0;\n  let tncCurrencyCode;\n  itinerary.legs.forEach(leg => {\n    if (leg.mode === \"CAR\" && leg.hailedCar && leg.tncData) {\n      const { currency, maxCost, minCost } = leg.tncData;\n      // TODO: Support non-USD\n      minTNCFare += minCost;\n      maxTNCFare += maxCost;\n      tncCurrencyCode = currency;\n    }\n  });\n\n  if (multiple) {\n    // Return object of fares\n    const transitFares = {};\n    if (itinerary && itinerary.fare && itinerary.fare.fare) {\n      Object.keys(itinerary.fare.fare).forEach(fareKey => {\n        const fareComponent = itinerary.fare.fare[fareKey];\n        transitFares[fareKey] = getTransitFare(fareComponent);\n      });\n    }\n\n    return {\n      maxTNCFare,\n      minTNCFare,\n      tncCurrencyCode,\n      transitFares\n    };\n  }\n\n  // Extract fare total from itinerary fares.\n  const fareComponent =\n    itinerary.fare && itinerary.fare.fare && itinerary.fare.fare.regular;\n  // Get string formatters and itinerary fare.\n  const {\n    centsToString,\n    currencyCode: transitCurrencyCode,\n    dollarsToString,\n    transitFare\n  } = getTransitFare(fareComponent);\n\n  return {\n    centsToString,\n    currencyCode: transitCurrencyCode || tncCurrencyCode,\n    dollarsToString,\n    maxTNCFare,\n    minTNCFare,\n    transitFare\n  };\n}\n\nexport function getTimeZoneOffset(itinerary) {\n  if (!itinerary.legs || !itinerary.legs.length) return 0;\n\n  // Determine if there is a DST offset between now and the itinerary start date\n  const dstOffset =\n    new Date(itinerary.startTime).getTimezoneOffset() -\n    new Date().getTimezoneOffset();\n\n  return (\n    itinerary.legs[0].agencyTimeZoneOffset +\n    (new Date().getTimezoneOffset() + dstOffset) * 60000\n  );\n}\n"],"file":"itinerary.js"}