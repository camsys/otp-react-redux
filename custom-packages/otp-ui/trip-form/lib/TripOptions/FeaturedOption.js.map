{"version":3,"sources":["../../src/TripOptions/FeaturedOption.tsx"],"names":["modeButtonAriaLabel","FeaturedOption","checkboxIcons","DetailedModeIcon","iconFillOverride","onQueryParamChange","queryParams","questionIcon","setFeaturedOption","supportedModes","mode","nonTransitModes","selectedCompanies","companies","split","selectedModes","option","category","categories","find","c","some","o","optionsAreCheckboxes","Boolean","selectOption","isChecked","company","filter","coreUtils","itinerary","isTransit","concat","join","id","options","map","index","companyIsSelected","modeIsSelected","m","length","image","label"],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for core-utils packages.\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport React from \"react\";\nimport { QuestionCircle } from \"@styled-icons/fa-regular/QuestionCircle\";\n\nimport {\n  accessModeIsWalkOnly,\n  getCategoryModes,\n  getCategoryPrimaryMode,\n  getNonTransitModes,\n  getSelectedModes\n} from \"./util\";\nimport { CheckboxIcons, ModeOption, QueryProps } from \"./types\";\nimport OptionButton from \"./OptionButton\";\n\nimport * as S from \"./styled\";\n\n// todo: move this string to localization file (and possibly add more exact info on each particular mode)\nconst modeButtonAriaLabel =\n  \"Opens a dialog that describes this mode, with optional links to third party services.\";\n\nconst FeaturedOption = ({\n  checkboxIcons,\n  DetailedModeIcon,\n  iconFillOverride,\n  onQueryParamChange,\n  queryParams,\n  questionIcon,\n  setFeaturedOption,\n  supportedModes\n}: QueryProps & {\n  checkboxIcons?: CheckboxIcons;\n  iconFillOverride?: string;\n  questionIcon?: React.ReactElement;\n  setFeaturedOption(option: string): void;\n}): React.ReactElement => {\n  // No featured mode to show if walking to transit\n  if (accessModeIsWalkOnly(queryParams?.mode)) return null;\n  const nonTransitModes = getNonTransitModes(queryParams?.mode);\n  const selectedCompanies = queryParams?.companies?.split(\",\") || [];\n  const selectedModes = getSelectedModes(queryParams);\n  const option = nonTransitModes[0];\n  const category = supportedModes.categories.find(c =>\n    getCategoryModes(c).some(o => o === option)\n  );\n  const optionsAreCheckboxes = Boolean(category.mode);\n\n  // FIXME: the entire selectOption method could probably be repalced\n  // with a better useEffect hook\n\n  const selectOption = (isChecked: boolean, o: ModeOption) => {\n    let mode = selectedModes;\n    let company = selectedCompanies;\n    if (isChecked) {\n      // Un-check the company box if dealing with checkboxes. Otherwise, do nothing.\n      if (optionsAreCheckboxes) {\n        company = selectedCompanies.filter(c => c !== o.company);\n        // Do nothing if already radio button is already checked.\n      } else {\n        return;\n      }\n    } else {\n      // if un checked, set/add company and set mode (FIXME: what about car/walk)\n      if (o.mode) {\n        mode = selectedModes\n          .filter(coreUtils.itinerary.isTransit)\n          .concat([o.mode]);\n      }\n      if (o.company) {\n        company = optionsAreCheckboxes\n          ? selectedCompanies.concat([o.company])\n          : [o.company];\n      } else {\n        company = [];\n      }\n    }\n    onQueryParamChange(\n      {\n        companies: company.join(\",\"),\n        mode: mode.join(\",\")\n      },\n      category.id\n    );\n  };\n\n  return (\n    <S.FeaturedOptionContainer>\n      <div>\n        {category.options.map((o, index) => {\n          const companyIsSelected = selectedCompanies.some(\n            c => c === o.company\n          );\n          const modeIsSelected = selectedModes.some(m => m === o.mode);\n          const isChecked = optionsAreCheckboxes\n            ? companyIsSelected\n            : o.company\n            ? companyIsSelected && modeIsSelected\n            : modeIsSelected;\n\n          return (\n            <OptionButton\n              checkboxIcons={checkboxIcons}\n              checked={isChecked}\n              disabled={isChecked && selectedCompanies.length === 1}\n              iconFillOverride={iconFillOverride}\n              image={o.image}\n              key={index}\n              label={o.label}\n              onClick={() => selectOption(isChecked, o)}\n              selected={isChecked}\n            />\n          );\n        })}\n      </div>\n      <S.FeaturedOptionQuestionContainer\n        aria-label={modeButtonAriaLabel}\n        onClick={() => setFeaturedOption(option)}\n        onKeyPress={() => setFeaturedOption(option)}\n        role=\"link\"\n        tabIndex={0}\n      >\n        <S.QuestionButton aria-label={modeButtonAriaLabel}>\n          {questionIcon || <QuestionCircle />}\n        </S.QuestionButton>\n        <S.FeaturedOptionImageWrapper>\n          {(DetailedModeIcon && (\n            <DetailedModeIcon mode={getCategoryPrimaryMode(category)} />\n          )) || <S.Image src={category.image} />}\n        </S.FeaturedOptionImageWrapper>\n      </S.FeaturedOptionQuestionContainer>\n    </S.FeaturedOptionContainer>\n  );\n};\n\nexport default FeaturedOption;\n"],"file":"FeaturedOption.js"}