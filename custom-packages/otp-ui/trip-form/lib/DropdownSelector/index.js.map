{"version":3,"sources":["../../src/DropdownSelector/index.tsx"],"names":["DropdownSelector","className","label","name","onChange","options","style","value","handleChange","evt","val","target","floatVal","parseFloat","Number","isNaN","id","map","o","i","text"],"mappings":";;;;;;;AACA;;AAEA;;;;;;AAwCA;AACA;AACA;AACe,SAASA,gBAAT,CAA0B;AACvCC,EAAAA,SAAS,GAAG,IAD2B;AAEvCC,EAAAA,KAAK,GAAG,IAF+B;AAGvCC,EAAAA,IAAI,GAAG,IAHgC;AAIvCC,EAAAA,QAAQ,GAAG,IAJ4B;AAKvCC,EAAAA,OAAO,GAAG,IAL6B;AAMvCC,EAAAA,KAAK,GAAG,IAN+B;AAOvCC,EAAAA,KAAK,GAAG;AAP+B,CAA1B,EAQyB;AACtC,QAAMC,YAAY,GAAG,wBAClBC,GAAD,IAAyC;AACvC,QAAI,OAAOL,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAMM,GAAG,GAAGD,GAAG,CAACE,MAAJ,CAAWJ,KAAvB;AACA,YAAMK,QAAQ,GAAGC,UAAU,CAACH,GAAD,CAA3B;AACAN,MAAAA,QAAQ,CAAC;AACP,SAACD,IAAD,GAAQW,MAAM,CAACC,KAAP,CAAaH,QAAb,IAAyBF,GAAzB,GAA+BE;AADhC,OAAD,CAAR;AAGD;AACF,GATkB,EAUnB,CAACR,QAAD,CAVmB,CAArB;AAaA,QAAMY,EAAE,GAAI,kBAAiBb,IAAK,EAAlC;AAEA,sBACE,6BAAC,CAAD,CAAG,gBAAH;AAAoB,IAAA,SAAS,EAAEF,SAA/B;AAA0C,IAAA,KAAK,EAAEK;AAAjD,kBAEE,uDACE,6BAAC,CAAD,CAAG,YAAH;AAAgB,IAAA,OAAO,EAAEU;AAAzB,KAA8Bd,KAA9B,CADF,CAFF,eAME,uDACE;AAAQ,IAAA,EAAE,EAAEc,EAAZ;AAAgB,IAAA,KAAK,EAAET,KAAvB;AAA8B,IAAA,QAAQ,EAAEC;AAAxC,KACGH,OAAO,IACNA,OAAO,CAACY,GAAR,CAAY,CAACC,CAAD,EAAIC,CAAJ,kBACV;AAAQ,IAAA,GAAG,EAAEA,CAAb;AAAgB,IAAA,KAAK,EAAED,CAAC,CAACX;AAAzB,KACGW,CAAC,CAACE,IADL,CADF,CAFJ,CADF,CANF,CADF;AAmBD","sourcesContent":["import CSS from \"csstype\";\nimport React, { ChangeEvent, ReactElement, useCallback } from \"react\";\n\nimport * as S from \"../styled\";\n\n// eslint-disable-next-line prettier/prettier\nimport type { QueryParamChangeEvent } from \"../types\";\n\ninterface DropdownSelectorProps {\n  /**\n   * The CSS class name(s) to apply to this element.\n   */\n  className?: string;\n  /**\n   * The contents of the contained <label> control.\n   */\n  label?: ReactElement | string;\n  /**\n   * A unique name for the setting.\n   */\n  name?: string;\n  /**\n   * Triggered when the value of the <select> control changes.\n   * @param arg The data {name: value} for the selected option.\n   */\n  onChange?: (evt: QueryParamChangeEvent) => void;\n  /**\n   * A list of {text, value} options for the <select> control.\n   */\n  options: {\n    text: string;\n    value: string | number;\n  }[];\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n  /**\n   * The initially-selected value for the contained <select> control.\n   */\n  value?: string | number;\n}\n\n/**\n * A wrapper that includes a <select> dropdown control and a <label> for the dropdown control.\n */\nexport default function DropdownSelector({\n  className = null,\n  label = null,\n  name = null,\n  onChange = null,\n  options = null,\n  style = null,\n  value = null\n}: DropdownSelectorProps): ReactElement {\n  const handleChange = useCallback(\n    (evt: ChangeEvent<HTMLSelectElement>) => {\n      if (typeof onChange === \"function\") {\n        const val = evt.target.value;\n        const floatVal = parseFloat(val);\n        onChange({\n          [name]: Number.isNaN(floatVal) ? val : floatVal\n        });\n      }\n    },\n    [onChange]\n  );\n\n  const id = `id-query-param-${name}`;\n\n  return (\n    <S.DropdownSelector className={className} style={style}>\n      {/* The <div> elements below are here for the grid layout, see S.DropdownSelector. */}\n      <div>\n        <S.SettingLabel htmlFor={id}>{label}</S.SettingLabel>\n      </div>\n\n      <div>\n        <select id={id} value={value} onChange={handleChange}>\n          {options &&\n            options.map((o, i) => (\n              <option key={i} value={o.value}>\n                {o.text}\n              </option>\n            ))}\n        </select>\n      </div>\n    </S.DropdownSelector>\n  );\n}\n"],"file":"index.js"}