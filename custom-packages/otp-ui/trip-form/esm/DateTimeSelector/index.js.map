{"version":3,"sources":["../../src/DateTimeSelector/index.tsx"],"names":["flatten","moment","coreUtils","React","useCallback","FormattedMessage","ModeButton","S","defaultEnglishMessages","defaultMessages","time","OTP_API_DATE_FORMAT","OTP_API_TIME_FORMAT","isInputTypeSupported","type","input","document","createElement","setAttribute","supportsDateTimeInputs","DateTimeSelector","className","date","dateFormatLegacy","departArrive","forceLegacy","onQueryParamChange","style","timeFormatLegacy","handleQueryParamChange","queryParam","handleInputChange","key","evt","target","value","handleDateChange","handleTimeChange","handleTimeChangeLegacy","newTime","format","handleDateChangeLegacy","newDate","setDepartArrive","option","departureOptions","text","forEach","opt","isSelected","isLegacy","map"],"mappings":"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","sourcesContent":["import CSS from \"csstype\";\nimport flatten from \"flat\";\nimport moment from \"moment\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore FIXME: Create TypeScript types for core-utils packages.\nimport coreUtils from \"@opentripplanner/core-utils\";\nimport React, { ChangeEvent, ReactElement, ReactNode, useCallback } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport ModeButton from \"../ModeButton\";\nimport * as S from \"../styled\";\n\n// eslint-disable-next-line prettier/prettier\nimport type { QueryParamChangeEvent } from \"../types\";\n\n// Load the default messages.\nimport defaultEnglishMessages from \"../../i18n/en-US.yml\";\n\n// HACK: We should flatten the messages loaded above because\n// the YAML loaders behave differently between webpack and our version of jest:\n// - the yaml loader for webpack returns a nested object,\n// - the yaml loader for jest returns messages with flattened ids.\nconst defaultMessages: Record<string, string> = flatten(defaultEnglishMessages);\n\nconst { OTP_API_DATE_FORMAT, OTP_API_TIME_FORMAT } = coreUtils.time;\n\ntype DepartArriveValue = \"NOW\" | \"DEPART\" | \"ARRIVE\";\n\ninterface DateTimeSelectorProps {\n  /**\n   * The CSS class name(s) to apply to this element.\n   */\n  className?: string;\n  /**\n   * The initial departure/arrival date string, in a format that an HTML <input type=\"date\"> control can render.\n   */\n  date?: string;\n  /**\n   * The date format string for legacy mode (on legacy browsers, or if `forceLegacy` is true).\n   */\n  dateFormatLegacy?: string;\n  /**\n   * The initial setting determining whether a trip should start or end at a given time.\n   */\n  departArrive?: DepartArriveValue;\n  /**\n   * If true, forces legacy mode and uses `<input type=\"text\">`\n   * instead of the native date/time pickers found on modern browsers.\n   */\n  forceLegacy?: boolean;\n  /**\n   * Triggered when a query parameter is changed.\n   * @param params A { param1: value1, param2, value2, ... } object that contains the new values for the parameter(s) that has (have) changed.\n   */\n  onQueryParamChange: (e: QueryParamChangeEvent) => void; // FIXME: add types, see interface TransitFareData.\n  /**\n   * Standard React inline style prop.\n   */\n  style?: CSS.Properties;\n  /**\n   * The initial departure/arrival time string, in a format that an HTML <input type=\"time\"> control can render.\n   */\n  time?: string;\n  /**\n   * The time format string for legacy mode (on legacy browsers, or if `forceLegacy` is true).\n   */\n  timeFormatLegacy?: string;\n}\n\ninterface DepartArriveOption {\n  isSelected?: boolean;\n  text: ReactNode;\n  type: DepartArriveValue;\n}\n\n/**\n * Determines whether the browser supports a particular <input type=<type> /> control,\n * so we can take advantage of native controls\n * (especially date/time selection) on modern (mobile) browsers.\n * @param {*} type One of the HTML5 input types.\n */\nfunction isInputTypeSupported(type: string): boolean {\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"type\", type);\n  return input.type === type;\n}\n\nconst supportsDateTimeInputs = isInputTypeSupported(\"date\") && isInputTypeSupported(\"time\");\n\n/**\n * The `DateTimeSelector` component lets the OTP user chose a departure or arrival date/time.\n * (The departure can be right now.)\n *\n * There are two rendering modes, a \"normal\" mode and a \"legacy\" mode.\n * - \"Normal\" mode: We try to use `<input type=\"time|date\">` for date and time input.\n *   On current HTML5 browsers (desktop or mobile), these controls\n *   render the date/time according to OS settings and natively offer a user interface\n *   for choosing the date/time.\n *   Thus, when `<input type=\"time|date\">` is supported, there is no need to specify a date/time format.\n *   If not, we fall back to \"legacy\" mode.\n * - \"Legacy\" mode: On Safari for MacOS, and on legacy browsers that don't support `<input type=\"time|date\">`,\n *   `<input type=\"time|date\">` renders as the default `<input type=\"text\">`, and in these conditions,\n *   we have to fall back to formatting the date/time ourselves, using `dateFormatLegacy` and `timeFormatLegacy` props.\n * - Implementers don't know in advance whether the browser supports `<input type=\"time|date\">`.\n *   That determination is performed by method `isInputTypeSupported(type)` above when the constructor is executed.\n *   Therefore, they should provide `dateFormatLegacy` and `timeFormatLegacy` props as a backup.\n *   If these props are not provided, the OTP API date format is used.\n * - For testing purposes, implementers can \"force\" the \"legacy\" mode by setting the `forceLegacy` prop to true.\n */\nexport default function DateTimeSelector({\n  className = null,\n  date = null,\n  dateFormatLegacy = OTP_API_DATE_FORMAT,\n  departArrive = \"NOW\",\n  forceLegacy = false,\n  onQueryParamChange = null,\n  style = null,\n  time = null,\n  timeFormatLegacy = OTP_API_TIME_FORMAT\n}: DateTimeSelectorProps): ReactElement {\n  const handleQueryParamChange = useCallback(\n    (queryParam: QueryParamChangeEvent): void => {\n      if (typeof onQueryParamChange === \"function\") {\n        onQueryParamChange(queryParam);\n      }\n    },\n    [onQueryParamChange]\n  );\n\n  const handleInputChange = (key: string) => useCallback(\n    (evt: ChangeEvent<HTMLInputElement>): void => {\n      handleQueryParamChange({ [key]: evt.target.value });\n    },\n    [onQueryParamChange, key]\n  );\n\n  const handleDateChange = handleInputChange(\"date\");\n\n  const handleTimeChange = handleInputChange(\"time\");\n\n  const handleTimeChangeLegacy = useCallback(\n    (evt: ChangeEvent<HTMLInputElement>): void => {\n      const newTime = moment(evt.target.value, timeFormatLegacy).format(\n        OTP_API_TIME_FORMAT\n      );\n      handleQueryParamChange({ newTime });\n    },\n    [onQueryParamChange]\n  );\n\n  const handleDateChangeLegacy = useCallback(\n    (evt: ChangeEvent<HTMLInputElement>): void => {\n      const newDate = moment(evt.target.value, dateFormatLegacy).format(\n        OTP_API_DATE_FORMAT\n      );\n      handleQueryParamChange({ newDate });\n    },\n    [onQueryParamChange]\n  );\n\n  const setDepartArrive = (option: DepartArriveOption) => useCallback(\n    () => {\n      if (option.type === \"NOW\") {\n        handleQueryParamChange({\n          departArrive: \"NOW\",\n          date: moment().format(OTP_API_DATE_FORMAT),\n          time: moment().format(OTP_API_TIME_FORMAT)\n        });\n      } else {\n        handleQueryParamChange({\n          departArrive: option.type\n        });\n      }\n    },\n    [onQueryParamChange, option.type]\n  );\n\n  const departureOptions: DepartArriveOption[] = [\n    {\n      // Default option.\n      type: \"NOW\",\n      text: (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.DateTimeSelector.now\"]}\n          description=\"Text indicating that the traveler wants to depart as soon as possible (i.e. 'now')\"\n          id=\"otpUi.DateTimeSelector.now\"\n        />\n      )\n    },\n    {\n      type: \"DEPART\",\n      text: (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.DateTimeSelector.depart\"]}\n          description=\"Text indicating that the traveler wants to depart at a given date/time\"\n          id=\"otpUi.DateTimeSelector.depart\"\n        />\n      )\n    },\n    {\n      type: \"ARRIVE\",\n      text: (\n        <FormattedMessage\n          defaultMessage={defaultMessages[\"otpUi.DateTimeSelector.arrive\"]}\n          description=\"Text indicating that the traveler wants to arrive by a certain date/time\"\n          id=\"otpUi.DateTimeSelector.arrive\"\n        />\n      )\n    }\n  ];\n  departureOptions.forEach(opt => {\n    opt.isSelected = departArrive === opt.type;\n  });\n\n  const isLegacy = forceLegacy || !supportsDateTimeInputs;\n\n  return (\n    <S.DateTimeSelector className={className} style={style}>\n      <S.DateTimeSelector.DepartureRow>\n        {departureOptions.map(opt => (\n          <ModeButton\n            key={opt.type}\n            onClick={setDepartArrive(opt)}\n            selected={opt.isSelected}\n          >\n            {opt.text}\n          </ModeButton>\n        ))}\n      </S.DateTimeSelector.DepartureRow>\n\n      {departArrive !== \"NOW\" && !isLegacy && (\n        <S.DateTimeSelector.DateTimeRow>\n          {/* The <div> elements below are used for layout, see S.DateTimeSelector. */}\n          <div>\n            <input\n              onChange={handleTimeChange}\n              required\n              type=\"time\"\n              value={time}\n            />\n          </div>\n          <div>\n            <input\n              onChange={handleDateChange}\n              required\n              type=\"date\"\n              value={date}\n            />\n          </div>\n        </S.DateTimeSelector.DateTimeRow>\n      )}\n\n      {/* Backup controls (for older browsers) */}\n      {departArrive !== \"NOW\" && isLegacy && (\n        <S.DateTimeSelector.DateTimeRow>\n          <div>\n            <input\n              defaultValue={moment(time, OTP_API_TIME_FORMAT).format(\n                timeFormatLegacy\n              )}\n              onChange={handleTimeChangeLegacy}\n              required\n              type=\"text\"\n            />\n          </div>\n          <div>\n            <input\n              defaultValue={moment(date, OTP_API_DATE_FORMAT).format(\n                dateFormatLegacy\n              )}\n              onChange={handleDateChangeLegacy}\n              required\n              type=\"text\"\n            />\n          </div>\n        </S.DateTimeSelector.DateTimeRow>\n      )}\n    </S.DateTimeSelector>\n  );\n}\n"],"file":"index.js"}