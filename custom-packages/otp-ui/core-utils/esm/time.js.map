{"version":3,"sources":["../src/time.js"],"names":["startOfDay","add","format","formatDuration","dateFnsFormatDuration","utcToZonedTime","OTP_API_DATE_FORMAT","OTP_API_DATE_FORMAT_DATE_FNS","OTP_API_TIME_FORMAT","formatDurationLikeMoment","seconds","showSeconds","localize","hours","Math","floor","minutes","secondsLeftOver","specLookup","xHours","xMinutes","xSeconds","locale","code","formatDistance","spec","val","undefined","getTimeFormat","config","dateTime","timeFormat","getDateFormat","dateFormat","getLongDateFormat","longDateFormat","formatDurationWithSeconds","formatTime","ms","options","offset","formatSecondsAfterMidnight","time","Date","getUserTimezone","fallbackTimezone","process","env","NODE_ENV","TZ","Intl","DateTimeFormat","resolvedOptions","timeZone","getCurrentTime","timezone","now","getCurrentDate"],"mappings":"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","sourcesContent":["import {\n  startOfDay,\n  add,\n  format,\n  formatDuration as dateFnsFormatDuration\n} from \"date-fns\";\nimport { utcToZonedTime } from \"date-fns-tz\";\n\n// special constants for making sure the following date format is always sent to\n// OTP regardless of whatever the user has configured as the display format\nexport const OTP_API_DATE_FORMAT = \"YYYY-MM-DD\";\n// Date-Fns uses a different string format than moment.js\n// see https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\nexport const OTP_API_DATE_FORMAT_DATE_FNS = \"yyyy-MM-dd\";\nexport const OTP_API_TIME_FORMAT = \"HH:mm\";\n\n/**\n * To ease the transition away from moment.js, this method uses date-fns to format durations\n * the way moment.js did.\n * @param {number}  seconds     The number of seconds to format\n * @param {boolean} showSeconds Whether to render seconds or not\n * @param {boolean} localize    If true, will create output like moment.js using date-fns locale.\n * Otherwise, uses date-fns default\n * @returns                   Formatted duration\n */\nfunction formatDurationLikeMoment(seconds, showSeconds, localize = true) {\n  // date-fns doesn't do this automatically\n  if ((!showSeconds && seconds < 60) || seconds === 0) {\n    return \"0 min\";\n  }\n\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds - hours * 3600) / 60);\n  const secondsLeftOver = showSeconds\n    ? seconds - hours * 3600 - minutes * 60\n    : 0;\n  const specLookup = {\n    xHours: \"hr\",\n    xMinutes: \"min\",\n    xSeconds: \"sec\"\n  };\n  const locale = localize\n    ? {\n        code: \"en-US\",\n        formatDistance: (spec, val) => {\n          return `${val} ${specLookup[spec]}`;\n        }\n      }\n    : undefined;\n\n  return dateFnsFormatDuration(\n    {\n      hours,\n      minutes,\n      seconds: secondsLeftOver\n    },\n    {\n      format: [\"hours\", \"minutes\", \"seconds\"],\n      locale\n    }\n  );\n}\n/**\n * @param  {[type]} config the OTP config object found in store\n * @return {string}        the config-defined time formatter or HH:mm (24-hr time)\n */\nexport function getTimeFormat(config) {\n  return config?.dateTime?.timeFormat || OTP_API_TIME_FORMAT;\n}\n\nexport function getDateFormat(config) {\n  return config?.dateTime?.dateFormat || OTP_API_DATE_FORMAT;\n}\n\nexport function getLongDateFormat(config) {\n  return config?.dateTime?.longDateFormat || \"D MMMM YYYY\";\n}\n\n/**\n * Formats an elapsed time duration for display in narrative.\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\nexport function formatDuration(seconds) {\n  return formatDurationLikeMoment(seconds, false);\n}\n\n/**\n * Formats an elapsed time in seconds, minutes, hours duration for display in narrative\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\nexport function formatDurationWithSeconds(seconds) {\n  return formatDurationLikeMoment(seconds, true);\n}\n/**\n * Formats a time value for display in narrative\n * TODO: internationalization/timezone\n * @param {number} ms epoch time value in milliseconds\n * @returns {string} formatted text representation\n */\nexport function formatTime(ms, options) {\n  return format(\n    ms + (options?.offset || 0),\n    options?.format || OTP_API_TIME_FORMAT\n  );\n}\n\n/**\n * Formats a seconds after midnight value for display in narrative\n * @param  {number} seconds  time since midnight in seconds\n * @param  {string} timeFormat  A valid date-fns time format\n * @return {string}                   formatted text representation\n */\nexport function formatSecondsAfterMidnight(seconds, timeFormat) {\n  const time = add(startOfDay(new Date()), { seconds });\n  return format(time, timeFormat);\n}\n\n/**\n * Uses Intl.DateTimeFormat() api to get the user's time zone. In a test\n * environment, pulls timezone information from an env variable. Default to\n * GMT+0 if the Intl API is unavailable.\n */\nexport function getUserTimezone(fallbackTimezone = \"Etc/Greenwich\") {\n  if (process.env.NODE_ENV === \"test\") return process.env.TZ;\n  return Intl?.DateTimeFormat().resolvedOptions().timeZone || fallbackTimezone;\n}\n\n/**\n * Formats current time for use in OTP query\n * The conversion to the user's timezone is needed for testing purposes.\n */\nexport function getCurrentTime(timezone = getUserTimezone()) {\n  return format(utcToZonedTime(Date.now(), timezone), OTP_API_TIME_FORMAT);\n}\n\n/**\n * Formats current date for use in OTP query\n * The conversion to the user's timezone is needed for testing purposes.\n */\nexport function getCurrentDate(timezone = getUserTimezone()) {\n  return format(\n    utcToZonedTime(Date.now(), timezone),\n    OTP_API_DATE_FORMAT_DATE_FNS\n  );\n}\n"],"file":"time.js"}